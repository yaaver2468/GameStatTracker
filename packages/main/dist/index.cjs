"use strict";const p=require("electron"),R=require("url"),k=require("path"),M=require("chokidar"),B=require("sqlite3"),g=require("fs"),H=require("net");function b(n){if(n&&n.__esModule)return n;const e=Object.create(null,{[Symbol.toStringTag]:{value:"Module"}});if(n){for(const s in n)if(s!=="default"){const t=Object.getOwnPropertyDescriptor(n,s);Object.defineProperty(e,s,t.get?t:{enumerable:!0,get:()=>n[s]})}}return e.default=n,Object.freeze(e)}const v=b(H),S=new Map([]),x=new Set(["https://github.com"]);p.app.on("web-contents-created",(n,e)=>{e.on("will-navigate",(s,t)=>{const{origin:a}=new R.URL(t);S.has(a)||s.preventDefault()}),e.session.setPermissionRequestHandler((s,t,a)=>{var o;const{origin:i}=new R.URL(s.getURL()),r=!!((o=S.get(i))!=null&&o.has(t));a(r)}),e.setWindowOpenHandler(({url:s})=>{const{origin:t}=new R.URL(s);return x.has(t)&&p.shell.openExternal(s).catch(console.error),{action:"deny"}}),e.on("will-attach-webview",(s,t,a)=>{const{origin:i}=new R.URL(a.src);if(!S.has(i)){s.preventDefault();return}delete t.preload,delete t.preloadURL,t.nodeIntegration=!1,t.contextIsolation=!0})});const W=require("electron-store"),h=new W,T={winX:h.get("winX")??0,winY:h.get("winY")??0,winWidth:h.get("winWidth")??1e3,winHeight:h.get("winHeight")??600};async function q(){function n(){return p.screen.getAllDisplays().map(i=>i.bounds).filter(i=>i.x<=T.winX&&i.x+i.width>=T.winX&&i.y<=T.winY&&i.y+i.height>=T.winY)[0]!=null}const e=n(),s=new p.BrowserWindow({show:!1,webPreferences:{nodeIntegration:!1,contextIsolation:!0,sandbox:!1,webviewTag:!1,preload:k.join(p.app.getAppPath(),"packages/preload/dist/index.cjs")},icon:k.join(p.app.getAppPath(),"packages/main/assets/icon.ico"),frame:!1,minWidth:1200,minHeight:600,x:e?T.winX:0,y:e?T.winY:0,width:T.winWidth,height:T.winHeight});s.on("ready-to-show",()=>{s==null||s.show()});const t=new R.URL("../renderer/dist/index.html","file://"+__dirname).toString();return await s.loadURL(t),s.on("move",()=>{const a=s.getPosition();h.set("winX",a[0]),h.set("winY",a[1])}),s.on("resize",()=>{const a=s.getSize();h.set("winWidth",a[0]),h.set("winHeight",a[1])}),s}async function A(){let n=p.BrowserWindow.getAllWindows().find(e=>!e.isDestroyed());return n===void 0&&(n=await q()),n.isMinimized()&&n.restore(),n.focus(),n}class G{id;gameID;time;killerID;killedID;knocked;weapon;constructor(e={id:0,gameID:"",time:0,killerID:"",killedID:"",knocked:!1,weapon:""}){this.id=e.id,this.gameID=e.gameID.toLowerCase(),this.time=e.time,this.killerID=e.killerID.toLowerCase(),this.killedID=e.killedID.toLowerCase(),this.knocked=e.knocked,this.weapon=e.weapon}}class U{id;playerID;gameID;isBot;team;kills;placement;constructor(e={id:0,playerID:"",gameID:"",isBot:!0,team:0,kills:0,placement:999}){this.id=e.id,this.playerID=e.playerID,this.gameID=e.gameID,this.isBot=e.isBot,this.team=e.team,this.kills=e.kills,this.placement=e.placement}}class D{gameID;owner;timestamp;replayName;mode;bots;players;duration;placement;kills;assists;accuracy;damageDealt;damageTaken;distanceTravelled;constructor(e={gameID:"",owner:"",timestamp:new Date,replayName:"",mode:"",bots:0,players:0,duration:0,placement:0,kills:0,assists:0,accuracy:0,damageDealt:0,damageTaken:0,distanceTravelled:0}){this.gameID=e.gameID.toLowerCase(),this.owner=e.owner.toLowerCase(),this.timestamp=e.timestamp,this.replayName=e.replayName,this.mode=e.mode,this.bots=e.bots,this.players=e.players,this.duration=e.duration,this.placement=e.placement,this.kills=e.kills,this.assists=e.assists,this.accuracy=e.accuracy,this.damageDealt=e.damageDealt,this.damageTaken=e.damageTaken,this.distanceTravelled=e.distanceTravelled}}class P{playerID;username;isBot;platform;skin;snipes;constructor(e={playerID:"",username:"AI",isBot:!0,platform:"epic",skin:"epic",snipes:0}){this.playerID=e.playerID.toLowerCase(),this.username=e.username,this.isBot=e.isBot,this.platform=e.platform,this.skin=e.skin,this.snipes=e.snipes}}const Y=[`CREATE TABLE IF NOT EXISTS 'GameEliminations' (
    'id' INTEGER PRIMARY KEY AUTOINCREMENT,
    'gameID' VARCHAR(255) NOT NULL,
    'time' INTEGER NOT NULL,
    'killerID' VARCHAR(255) NOT NULL,
    'killedID' VARCHAR(255) NOT NULL,
    'knocked' TINYINT(1) NOT NULL,
    'weapon' VARCHAR(255) NOT NULL
  )`,`CREATE TABLE IF NOT EXISTS 'GamePlayers' (
    'id' INTEGER PRIMARY KEY AUTOINCREMENT,
    'playerID' VARCHAR(255) NOT NULL,
    'gameID' VARCHAR(255) NOT NULL,
    'isBot' TINYINT(1) NOT NULL,
    'team' INTEGER NOT NULL,
    'kills' INTEGER NOT NULL DEFAULT 0,
    'placement' INTEGER NOT NULL
  )`,`CREATE TABLE IF NOT EXISTS 'GameStats' (
    'gameID' VARCHAR(255) NOT NULL UNIQUE PRIMARY KEY,
    'owner' VARCHAR(255) NOT NULL,
    'timestamp' DATETIME NOT NULL UNIQUE,
    'replayName' VARCHAR(255) NOT NULL,
    'mode' VARCHAR(255) NOT NULL,
    'bots' INTEGER NOT NULL,
    'players' INTEGER NOT NULL,
    'duration' INTEGER DEFAULT -1,
    'placement' INTEGER NOT NULL,
    'kills' INTEGER DEFAULT -1,
    'assists' INTEGER DEFAULT 0,
    'accuracy' DOUBLE PRECISION DEFAULT '-1',
    'damageDealt' INTEGER DEFAULT -1,
    'damageTaken' INTEGER DEFAULT -1,
    'distanceTravelled' DOUBLE PRECISION DEFAULT '-1'
  )`,`CREATE TABLE IF NOT EXISTS 'Players' (
    'playerID' VARCHAR(255) NOT NULL UNIQUE PRIMARY KEY,
    'username' VARCHAR(255) NOT NULL,
    'isBot' VARCHAR(255) NOT NULL,
    'platform' VARCHAR(255),
    'skin' VARCHAR(255),
    'snipes' INTEGER NOT NULL DEFAULT 1
  )`];async function d(n){return new Promise(function(e,s){y.database.all(n,function(t,a){if(t)return console.log(t),s(t);e(a)})})}async function _(n){return new Promise((e,s)=>{y.database.serialize(()=>{function t(a){a<n.length&&y.database.run(n[a],i=>{if(i)return console.log(i),s(!1);t(++a)}),e(!0)}t(0)})})}async function f(n){return new Promise(function(e,s){y.database.exec(n,function(t){if(t)return console.log(t),s(!1);e(!0)})})}async function N(n){return new Promise(function(e,s){y.database.get(n,function(t,a){if(t)return console.log(t),s(t);e(a)})})}function C(n){return`(${"'"+n.join("','")+"'"})`}class V{database;constructor(){this.database=new B.Database("database.db",e=>{e&&console.error("Database opening error: ",e)}),Y.forEach(e=>{this.database.run(e)})}addReplay=async(e,s,t,a)=>{function i(l){return l.replaceAll("'","''")}let r;if(r=`INSERT INTO GameStats VALUES ('${a.gameID}', '${a.owner}', '${a.timestamp.toISOString()}', '${i(a.replayName)}', '${a.mode}', ${a.bots}, ${a.players}, ${a.duration}, ${a.placement}, ${a.kills}, ${a.assists}, ${a.accuracy}, ${a.damageDealt}, ${a.damageTaken}, ${a.distanceTravelled})`,!await f(r)||(r=`INSERT INTO GamePlayers VALUES ${e.map(l=>`(NULL, '${l.playerID}', '${l.gameID}', ${l.isBot?1:0}, ${l.team}, ${l.kills}, ${l.placement})`).join(", ")}`,!await f(r))||s.length>0&&(r=`INSERT INTO GameEliminations VALUES ${s.map(l=>`(NULL, '${l.gameID}', ${l.time}, '${l.killerID}', '${l.killedID}', ${l.knocked}, '${l.weapon}')`).join(", ")}`,!await f(r)))return!1;const o=[],u=[];for(let l=0;l<t.length;l++){const m=t[l],E=await this.getPlayer(m.playerID),w=m.platform==null?"NULL":`'${m.platform}'`;let I=m.skin==null?"NULL":`'${m.skin}'`;E!=null?(E.skin!=null&&I=="NULL"&&(I=E.skin),o.push(`UPDATE Players SET snipes = snipes + 1, platform = ${w}, username = '${i(m.username)}', skin = ${I} WHERE playerID = '${m.playerID}'`)):u.push(`('${m.playerID}', '${i(m.username)}', ${m.isBot}, ${w}, ${I}, ${m.snipes})`)}return u.length>0&&(r=`INSERT INTO Players VALUES ${u.join(", ")}`,!await f(r))?!1:await _(o)};getMatchHistory=async(e=1)=>{const t=await d(`SELECT * FROM GameStats ORDER BY timestamp DESC LIMIT ${25} OFFSET ${25*e-25}`),a=[];return t.forEach(i=>{a.push(new D(i))}),a};getGamerHistory=async(e=1,s)=>{const a=[],i=await d(`SELECT gameID FROM GamePlayers WHERE playerID = '${s}'`);return(await d(`SELECT * FROM GameStats WHERE gameID IN ${C(i.map(o=>o.gameID))} ORDER BY timestamp DESC LIMIT ${25} OFFSET ${25*e-25}`)).forEach(o=>{a.push(new D(o))}),a};getEliminations=async e=>{const s=await d(`SELECT * FROM GameEliminations WHERE gameID='${e}' ORDER BY id`),t=[];return s.forEach(a=>{t.push(new G(a))}),t};getGamers=async e=>{const s=await d(`SELECT * FROM GamePlayers WHERE gameID='${e}' ORDER BY team`),t=[];return s.forEach(a=>{t.push(new U(a))}),t};getGamerPlayers=async e=>{const s=e.map(i=>`${i.playerID}`),t=await d(`SELECT * FROM Players WHERE playerID IN ${C(s)}`),a=[];return t.forEach(i=>{a.push(new P(i))}),a};getGameStats=async e=>{const s=await N(`SELECT * FROM GameStats WHERE gameID='${e}'`);return new D(s)};getPlayer=async e=>await N(`SELECT * FROM Players WHERE playerID='${e}'`);getPlayers=async()=>await d("SELECT * FROM Players");getPlayerGames=async e=>{const s=await d(`SELECT * FROM GamePlayers WHERE playerID='${e}'`),t=[];return s.forEach(a=>{t.push(new D(a))}),t};getLastGameID=async()=>{const e=await N("SELECT * FROM GameStats ORDER BY timestamp DESC LIMIT 1");return e!=null?e.gameID:null};getSnipers=async()=>{const e=await d("SELECT * FROM Players ORDER BY snipes DESC"),s=[];return e.forEach(t=>{s.push(new P(t))}),s};getLastGame=async()=>await N("SELECT * FROM GameStats ORDER BY Timestamp DESC LIMIT 1");deleteMatch=async e=>(await f(`DELETE FROM GameStats WHERE gameID='${e}'`),await f(`UPDATE Players SET snipes = snipes - 1 WHERE playerID IN (SELECT playerID FROM GamePlayers WHERE gameID = '${e}')`),await f(`DELETE FROM GamePlayers WHERE gameID='${e}'`),await f(`DELETE FROM GameEliminations WHERE gameID='${e}'`))}const y=new V,z={0:"Storm",1:"Fall",2:"Pistol",3:"Shotgun",4:"Rifle",5:"SMG",6:"Sniper",7:"NoScope",8:"Pickaxe",10:"Grenade",11:"C4",12:"GrenadeLauncher",13:"Explosives",14:"Minigun",15:"Bow",16:"Trap",17:"FinallyEliminated",23:"Vehicle",30:"Stink",31:"Water",32:"Turret",48:"Unknown"},X=require("node-fetch"),j=require("https"),K=require("sharp"),Q=require("crypto");let c;async function J(n,e){const s=`\\\\.\\pipe\\${e}`;try{require("fs").existsSync(s)&&require("fs").unlinkSync(s)}catch{}var t=require("child_process");return t.exec("replayParser\\FortReplayParser.exe "+n),new Promise((a,i)=>{const r=v.createServer(o=>{let u="";o.on("data",l=>{u+=l.toString()}),o.on("end",()=>{const l=u.trim();if(r.close(),l==="Replay in progress.")i(l);else try{a(JSON.parse(l))}catch{i("Failed to parse JSON data.")}}),o.on("error",l=>{console.error("Stream error:",l),r.close(),i(l)})});r.on("error",o=>{console.error("Server error:",o),r.close(),i(o)}),r.listen(s),setTimeout(()=>{r.close(),i("Failed to parse replay in time.")},7e3)})}async function Z(n){const e=[],s=await y.getPlayers();return n.forEach(t=>{if(e.filter(i=>[t.BotId,t.EpicId,t.PlayerId].includes(i.playerID.toUpperCase())).length==0){const i=(t.BotId??t.EpicId??t.PlayerId??"BadPlayerId").toLowerCase(),r=s.find(o=>o.playerID==i);e.push(new P({playerID:i,username:t.PlayerName!=null?t.PlayerName:(r==null?void 0:r.username)??"",isBot:t.IsBot,platform:t.Platform!=null?t.Platform:(r==null?void 0:r.platform)??"NULL",skin:t.Cosmetics.Character!=null?t.Cosmetics.Character:(r==null?void 0:r.skin)??"",snipes:1}))}}),e}function ee(n){const e=c.Eliminations,s=[];return e!=null&&e.length>0&&e.forEach(t=>{const a=parseInt(t.Time.split(":")[0]),i=parseInt(t.Time.split(":")[1]);s.push(new G({id:0,gameID:n,time:1e3*(a*60+i),killerID:t.Eliminator,killedID:t.Eliminated,knocked:t.Knocked,weapon:z[t.GunType]??50}))}),s}function te(n,e,s,t){const a=t.toLowerCase().includes("creative"),i=a?0:n.filter(m=>m.TeamIndex>2&&m.IsBot).length,r=n.filter(m=>m.TeamIndex>2&&!m.IsBot).length,o=a?null:n.find(m=>m.IsReplayOwner),u=o!=null?o.EpicId??o.PlayerId??"BadPlayerId":"null",l=c.Info.LengthInMs;return new D({gameID:e,owner:u,timestamp:new Date(c.Info.Timestamp),replayName:s,mode:t,bots:i,players:r,duration:l,placement:a?0:c.TeamStats?c.TeamStats.Position:0,kills:a?0:c.Stats?c.Stats.Eliminations:0,assists:a?0:c.Stats?c.Stats.Assists:0,accuracy:a?0:c.Stats?c.Stats.Accuracy:0,damageDealt:a?0:c.Stats?c.Stats.DamageToPlayers:0,damageTaken:a?0:c.Stats?c.Stats.DamageTaken:0,distanceTravelled:a?0:c.Stats?c.Stats.TotalTraveled:0})}function ae(n,e,s,t){const a=[],i=t.toLowerCase().includes("creative");return e.forEach(r=>{var m;const o=n.find(E=>{var w,I,L;return[(w=E.BotId)==null?void 0:w.toLowerCase(),(I=E.EpicId)==null?void 0:I.toLowerCase(),(L=E.PlayerId)==null?void 0:L.toLowerCase()].includes(r.playerID)});let u=(m=c.TeamData)==null?void 0:m.find(E=>E.TeamIndex==o.TeamIndex),l=i?0:u.Placement??0;a.push(new U({id:0,playerID:r.playerID,gameID:s,isBot:r.isBot,team:o.TeamIndex!=null?o.TeamIndex-2:-1,kills:o.Kills??0,placement:l}))}),a}async function se(n){function e(a,i){return new Promise((r,o)=>{j.get(a,u=>{u.statusCode===200?u.pipe(g.createWriteStream(i)).on("error",o).once("close",async()=>{await K(i).resize(64).toFile(i.replace("_rawFile","")),g.unlink(i,l=>{l&&o(!1),r(!0)})}):(u.resume(),o(!1))})})}const s=n.filter(a=>a.skin!="null"&&a.skin!="").map(a=>a.skin);let t;t=`${__dirname.split("\\").slice(0,-2).join("/")}/assets/skins/`,g.existsSync(t)||g.mkdirSync(t,{recursive:!0});for(let a=0;a<s.length;a++){const i=t+s[a]+".png";if(!g.existsSync(`${i}`)){const o=`https://fortnite-api.com/v2/cosmetics/br/${s[a]}`,l=await(await X(o)).json();l.data!=null&&await e(l.data.images.smallIcon,`${t+s[a]+"_rawFile.png"}`)==!1&&console.log("Failed to download skin.")}}}async function $(n){var w;function e(){return Q.createHash("md5").update(new Date(c.Info.Timestamp).getTime().toString()).digest("hex")}const s=n.split("\\").pop()??"Invalid Replay Name";if(s==="Invalid Replay Name")return!1;try{c=await J(n,s)}catch{return!1}if(c==null)return!1;const t=await y.getLastGame(),a=1794e3;if(t!=null&&t.gameID.includes("-")&&t.duration>a||c.Info.LengthInMs>a)if(t!=null&&t.gameID.split("-").length>1){const I=t.gameID.split("-"),L=parseInt(I[1])+1;c.GameData.GameSessionId=I[0]+`-${L}`}else c.GameData.GameSessionId=(c.GameData.GameSessionId??e())+"-0";let i=c.GameData.GameSessionId??e();if((await y.getGameStats(i)).gameID.length>0)return!0;const r=c.GameData.CurrentPlaylist??"CREATIVE_UNREAL",o=((w=c.PlayerData)==null?void 0:w.filter(I=>I.BotId!=null||I.EpicId!=null||I.PlayerId!=null))??[],u=await Z(o),l=ee(i),m=te(o,i,s,r),E=ae(o,u,i,r);return await se(u),await y.addReplay(E,l,u,m)}let O;const ne=p.app.requestSingleInstanceLock();ne||(p.app.quit(),process.exit(0));p.app.on("second-instance",A);p.app.on("window-all-closed",()=>{process.platform!=="darwin"&&p.app.quit()});p.app.on("activate",A);p.app.whenReady().then(async()=>{O=await A()}).catch(n=>console.error("Failed create window:",n));function ie(n){return n.replace(/%([^%]+)%/g,function(e,s){return process.env[s]})}const F=ie("%LOCALAPPDATA%\\FortniteGame\\Saved\\Demos");M.watch(F,{awaitWriteFinish:{stabilityThreshold:1e3}}).on("change",async n=>{await $(n)&&O.reload()});p.ipcMain.handle("addReplay",async n=>{const e=await p.dialog.showOpenDialog({properties:["openFile","multiSelections"],defaultPath:F});if(!e.canceled&&e.filePaths.length>0)for(let s=0;s<e.filePaths.length;s++){const t=e.filePaths[s],a=await $(t);if(e.filePaths.length==1&&a)return"last"}return null});p.ipcMain.on("closeProgram",()=>{p.app.exit()});p.ipcMain.on("minimizeProgram",()=>{O.minimize()});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguY2pzIiwic291cmNlcyI6WyIuLi9zcmMvc2VjdXJpdHktcmVzdHJpY3Rpb25zLnRzIiwiLi4vc3JjL21haW5XaW5kb3cudHMiLCIuLi8uLi9wcmVsb2FkL3NyYy9tb2RlbHMvR2FtZUVsaW1pbmF0aW9uLnRzIiwiLi4vLi4vcHJlbG9hZC9zcmMvbW9kZWxzL0dhbWVQbGF5ZXIudHMiLCIuLi8uLi9wcmVsb2FkL3NyYy9tb2RlbHMvR2FtZVN0YXRzLnRzIiwiLi4vLi4vcHJlbG9hZC9zcmMvbW9kZWxzL1BsYXllci50cyIsIi4uLy4uL3ByZWxvYWQvc3JjL2RhdGFiYXNlLnRzIiwiLi4vc3JjL2RhdGF0eXBlcy50cyIsIi4uL3NyYy9yZXBsYXlQYXJzZXIudHMiLCIuLi9zcmMvaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHthcHAsIHNoZWxsfSBmcm9tICdlbGVjdHJvbic7XG5pbXBvcnQge1VSTH0gZnJvbSAndXJsJztcblxudHlwZSBQZXJtaXNzaW9ucyA9XG4gIHwgJ2NsaXBib2FyZC1yZWFkJ1xuICB8ICdtZWRpYSdcbiAgfCAnZGlzcGxheS1jYXB0dXJlJ1xuICB8ICdtZWRpYUtleVN5c3RlbSdcbiAgfCAnZ2VvbG9jYXRpb24nXG4gIHwgJ25vdGlmaWNhdGlvbnMnXG4gIHwgJ21pZGknXG4gIHwgJ21pZGlTeXNleCdcbiAgfCAncG9pbnRlckxvY2snXG4gIHwgJ2Z1bGxzY3JlZW4nXG4gIHwgJ29wZW5FeHRlcm5hbCdcbiAgfCAndW5rbm93bic7XG5cbi8qKlxuICogQSBsaXN0IG9mIG9yaWdpbnMgdGhhdCB5b3UgYWxsb3cgb3BlbiBJTlNJREUgdGhlIGFwcGxpY2F0aW9uIGFuZCBwZXJtaXNzaW9ucyBmb3IgdGhlbS5cbiAqXG4gKiBJbiBkZXZlbG9wbWVudCBtb2RlIHlvdSBuZWVkIGFsbG93IG9wZW4gYFZJVEVfREVWX1NFUlZFUl9VUkxgLlxuICovXG5jb25zdCBBTExPV0VEX09SSUdJTlNfQU5EX1BFUk1JU1NJT05TID0gbmV3IE1hcDxzdHJpbmcsIFNldDxQZXJtaXNzaW9ucz4+KFxuICBpbXBvcnQubWV0YS5lbnYuREVWICYmIGltcG9ydC5tZXRhLmVudi5WSVRFX0RFVl9TRVJWRVJfVVJMXG4gICAgPyBbW25ldyBVUkwoaW1wb3J0Lm1ldGEuZW52LlZJVEVfREVWX1NFUlZFUl9VUkwpLm9yaWdpbiwgbmV3IFNldCgpXV1cbiAgICA6IFtdLFxuKTtcblxuLyoqXG4gKiBBIGxpc3Qgb2Ygb3JpZ2lucyB0aGF0IHlvdSBhbGxvdyBvcGVuIElOIEJST1dTRVIuXG4gKiBOYXZpZ2F0aW9uIHRvIHRoZSBvcmlnaW5zIGJlbG93IGlzIG9ubHkgcG9zc2libGUgaWYgdGhlIGxpbmsgb3BlbnMgaW4gYSBuZXcgd2luZG93LlxuICpcbiAqIEBleGFtcGxlXG4gKiA8YVxuICogICB0YXJnZXQ9XCJfYmxhbmtcIlxuICogICBocmVmPVwiaHR0cHM6Ly9naXRodWIuY29tL1wiXG4gKiA+XG4gKi9cbmNvbnN0IEFMTE9XRURfRVhURVJOQUxfT1JJR0lOUyA9IG5ldyBTZXQ8YGh0dHBzOi8vJHtzdHJpbmd9YD4oWydodHRwczovL2dpdGh1Yi5jb20nXSk7XG5cbmFwcC5vbignd2ViLWNvbnRlbnRzLWNyZWF0ZWQnLCAoXywgY29udGVudHMpID0+IHtcbiAgLyoqXG4gICAqIEJsb2NrIG5hdmlnYXRpb24gdG8gb3JpZ2lucyBub3Qgb24gdGhlIGFsbG93bGlzdC5cbiAgICpcbiAgICogTmF2aWdhdGlvbiBleHBsb2l0cyBhcmUgcXVpdGUgY29tbW9uLiBJZiBhbiBhdHRhY2tlciBjYW4gY29udmluY2UgdGhlIGFwcCB0byBuYXZpZ2F0ZSBhd2F5IGZyb20gaXRzIGN1cnJlbnQgcGFnZSxcbiAgICogdGhleSBjYW4gcG9zc2libHkgZm9yY2UgdGhlIGFwcCB0byBvcGVuIGFyYml0cmFyeSB3ZWIgcmVzb3VyY2VzL3dlYnNpdGVzIG9uIHRoZSB3ZWIuXG4gICAqXG4gICAqIEBzZWUgaHR0cHM6Ly93d3cuZWxlY3Ryb25qcy5vcmcvZG9jcy9sYXRlc3QvdHV0b3JpYWwvc2VjdXJpdHkjMTMtZGlzYWJsZS1vci1saW1pdC1uYXZpZ2F0aW9uXG4gICAqL1xuICBjb250ZW50cy5vbignd2lsbC1uYXZpZ2F0ZScsIChldmVudCwgdXJsKSA9PiB7XG4gICAgY29uc3Qge29yaWdpbn0gPSBuZXcgVVJMKHVybCk7XG4gICAgaWYgKEFMTE9XRURfT1JJR0lOU19BTkRfUEVSTUlTU0lPTlMuaGFzKG9yaWdpbikpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBQcmV2ZW50IG5hdmlnYXRpb25cbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgaWYgKGltcG9ydC5tZXRhLmVudi5ERVYpIHtcbiAgICAgIGNvbnNvbGUud2FybihgQmxvY2tlZCBuYXZpZ2F0aW5nIHRvIGRpc2FsbG93ZWQgb3JpZ2luOiAke29yaWdpbn1gKTtcbiAgICB9XG4gIH0pO1xuXG4gIC8qKlxuICAgKiBCbG9jayByZXF1ZXN0cyBmb3IgZGlzYWxsb3dlZCBwZXJtaXNzaW9ucy5cbiAgICogQnkgZGVmYXVsdCwgRWxlY3Ryb24gd2lsbCBhdXRvbWF0aWNhbGx5IGFwcHJvdmUgYWxsIHBlcm1pc3Npb24gcmVxdWVzdHMuXG4gICAqXG4gICAqIEBzZWUgaHR0cHM6Ly93d3cuZWxlY3Ryb25qcy5vcmcvZG9jcy9sYXRlc3QvdHV0b3JpYWwvc2VjdXJpdHkjNS1oYW5kbGUtc2Vzc2lvbi1wZXJtaXNzaW9uLXJlcXVlc3RzLWZyb20tcmVtb3RlLWNvbnRlbnRcbiAgICovXG4gIGNvbnRlbnRzLnNlc3Npb24uc2V0UGVybWlzc2lvblJlcXVlc3RIYW5kbGVyKCh3ZWJDb250ZW50cywgcGVybWlzc2lvbiwgY2FsbGJhY2spID0+IHtcbiAgICBjb25zdCB7b3JpZ2lufSA9IG5ldyBVUkwod2ViQ29udGVudHMuZ2V0VVJMKCkpO1xuXG4gICAgY29uc3QgcGVybWlzc2lvbkdyYW50ZWQgPSAhIUFMTE9XRURfT1JJR0lOU19BTkRfUEVSTUlTU0lPTlMuZ2V0KG9yaWdpbik/LmhhcyhwZXJtaXNzaW9uKTtcbiAgICBjYWxsYmFjayhwZXJtaXNzaW9uR3JhbnRlZCk7XG5cbiAgICBpZiAoIXBlcm1pc3Npb25HcmFudGVkICYmIGltcG9ydC5tZXRhLmVudi5ERVYpIHtcbiAgICAgIGNvbnNvbGUud2FybihgJHtvcmlnaW59IHJlcXVlc3RlZCBwZXJtaXNzaW9uIGZvciAnJHtwZXJtaXNzaW9ufScsIGJ1dCB3YXMgcmVqZWN0ZWQuYCk7XG4gICAgfVxuICB9KTtcblxuICAvKipcbiAgICogSHlwZXJsaW5rcyBsZWFkaW5nIHRvIGFsbG93ZWQgc2l0ZXMgYXJlIG9wZW5lZCBpbiB0aGUgZGVmYXVsdCBicm93c2VyLlxuICAgKlxuICAgKiBUaGUgY3JlYXRpb24gb2YgbmV3IGB3ZWJDb250ZW50c2AgaXMgYSBjb21tb24gYXR0YWNrIHZlY3Rvci4gQXR0YWNrZXJzIGF0dGVtcHQgdG8gY29udmluY2UgdGhlIGFwcCB0byBjcmVhdGUgbmV3IHdpbmRvd3MsXG4gICAqIGZyYW1lcywgb3Igb3RoZXIgcmVuZGVyZXIgcHJvY2Vzc2VzIHdpdGggbW9yZSBwcml2aWxlZ2VzIHRoYW4gdGhleSBoYWQgYmVmb3JlOyBvciB3aXRoIHBhZ2VzIG9wZW5lZCB0aGF0IHRoZXkgY291bGRuJ3Qgb3BlbiBiZWZvcmUuXG4gICAqIFlvdSBzaG91bGQgZGVueSBhbnkgdW5leHBlY3RlZCB3aW5kb3cgY3JlYXRpb24uXG4gICAqXG4gICAqIEBzZWUgaHR0cHM6Ly93d3cuZWxlY3Ryb25qcy5vcmcvZG9jcy9sYXRlc3QvdHV0b3JpYWwvc2VjdXJpdHkjMTQtZGlzYWJsZS1vci1saW1pdC1jcmVhdGlvbi1vZi1uZXctd2luZG93c1xuICAgKiBAc2VlIGh0dHBzOi8vd3d3LmVsZWN0cm9uanMub3JnL2RvY3MvbGF0ZXN0L3R1dG9yaWFsL3NlY3VyaXR5IzE1LWRvLW5vdC11c2Utb3BlbmV4dGVybmFsLXdpdGgtdW50cnVzdGVkLWNvbnRlbnRcbiAgICovXG4gIGNvbnRlbnRzLnNldFdpbmRvd09wZW5IYW5kbGVyKCh7dXJsfSkgPT4ge1xuICAgIGNvbnN0IHtvcmlnaW59ID0gbmV3IFVSTCh1cmwpO1xuXG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvciBUeXBlIGNoZWNraW5nIGlzIHBlcmZvcm1lZCBpbiBydW50aW1lLlxuICAgIGlmIChBTExPV0VEX0VYVEVSTkFMX09SSUdJTlMuaGFzKG9yaWdpbikpIHtcbiAgICAgIC8vIE9wZW4gdXJsIGluIGRlZmF1bHQgYnJvd3Nlci5cbiAgICAgIHNoZWxsLm9wZW5FeHRlcm5hbCh1cmwpLmNhdGNoKGNvbnNvbGUuZXJyb3IpO1xuICAgIH0gZWxzZSBpZiAoaW1wb3J0Lm1ldGEuZW52LkRFVikge1xuICAgICAgY29uc29sZS53YXJuKGBCbG9ja2VkIHRoZSBvcGVuaW5nIG9mIGEgZGlzYWxsb3dlZCBvcmlnaW46ICR7b3JpZ2lufWApO1xuICAgIH1cblxuICAgIC8vIFByZXZlbnQgY3JlYXRpbmcgYSBuZXcgd2luZG93LlxuICAgIHJldHVybiB7YWN0aW9uOiAnZGVueSd9O1xuICB9KTtcblxuICAvKipcbiAgICogVmVyaWZ5IHdlYnZpZXcgb3B0aW9ucyBiZWZvcmUgY3JlYXRpb24uXG4gICAqXG4gICAqIFN0cmlwIGF3YXkgcHJlbG9hZCBzY3JpcHRzLCBkaXNhYmxlIE5vZGUuanMgaW50ZWdyYXRpb24sIGFuZCBlbnN1cmUgb3JpZ2lucyBhcmUgb24gdGhlIGFsbG93bGlzdC5cbiAgICpcbiAgICogQHNlZSBodHRwczovL3d3dy5lbGVjdHJvbmpzLm9yZy9kb2NzL2xhdGVzdC90dXRvcmlhbC9zZWN1cml0eSMxMi12ZXJpZnktd2Vidmlldy1vcHRpb25zLWJlZm9yZS1jcmVhdGlvblxuICAgKi9cbiAgY29udGVudHMub24oJ3dpbGwtYXR0YWNoLXdlYnZpZXcnLCAoZXZlbnQsIHdlYlByZWZlcmVuY2VzLCBwYXJhbXMpID0+IHtcbiAgICBjb25zdCB7b3JpZ2lufSA9IG5ldyBVUkwocGFyYW1zLnNyYyk7XG4gICAgaWYgKCFBTExPV0VEX09SSUdJTlNfQU5EX1BFUk1JU1NJT05TLmhhcyhvcmlnaW4pKSB7XG4gICAgICBpZiAoaW1wb3J0Lm1ldGEuZW52LkRFVikge1xuICAgICAgICBjb25zb2xlLndhcm4oYEEgd2VidmlldyB0cmllZCB0byBhdHRhY2ggJHtwYXJhbXMuc3JjfSwgYnV0IHdhcyBibG9ja2VkLmApO1xuICAgICAgfVxuXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFN0cmlwIGF3YXkgcHJlbG9hZCBzY3JpcHRzIGlmIHVudXNlZCBvciB2ZXJpZnkgdGhlaXIgbG9jYXRpb24gaXMgbGVnaXRpbWF0ZS5cbiAgICBkZWxldGUgd2ViUHJlZmVyZW5jZXMucHJlbG9hZDtcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIGBwcmVsb2FkVVJMYCBleGlzdHMuIC0gQHNlZSBodHRwczovL3d3dy5lbGVjdHJvbmpzLm9yZy9kb2NzL2xhdGVzdC9hcGkvd2ViLWNvbnRlbnRzI2V2ZW50LXdpbGwtYXR0YWNoLXdlYnZpZXdcbiAgICBkZWxldGUgd2ViUHJlZmVyZW5jZXMucHJlbG9hZFVSTDtcblxuICAgIC8vIERpc2FibGUgTm9kZS5qcyBpbnRlZ3JhdGlvblxuICAgIHdlYlByZWZlcmVuY2VzLm5vZGVJbnRlZ3JhdGlvbiA9IGZhbHNlO1xuXG4gICAgLy8gRW5hYmxlIGNvbnRleHRJc29sYXRpb25cbiAgICB3ZWJQcmVmZXJlbmNlcy5jb250ZXh0SXNvbGF0aW9uID0gdHJ1ZTtcbiAgfSk7XG59KTtcbiIsImltcG9ydCB7YXBwLCBCcm93c2VyV2luZG93LCBzY3JlZW59IGZyb20gJ2VsZWN0cm9uJztcbmltcG9ydCB7am9pbn0gZnJvbSAncGF0aCc7XG5pbXBvcnQge1VSTH0gZnJvbSAndXJsJztcbmNvbnN0IFN0b3JlID0gcmVxdWlyZSgnZWxlY3Ryb24tc3RvcmUnKTtcblxuY29uc3Qgc3RvcmUgPSBuZXcgU3RvcmUoKTtcbmNvbnN0IHNldHRpbmdzID0ge1xuICB3aW5YOiBzdG9yZS5nZXQoJ3dpblgnKSA/PyAwLFxuICB3aW5ZOiBzdG9yZS5nZXQoJ3dpblknKSA/PyAwLFxuICB3aW5XaWR0aDogc3RvcmUuZ2V0KCd3aW5XaWR0aCcpID8/IDEwMDAsXG4gIHdpbkhlaWdodDogc3RvcmUuZ2V0KCd3aW5IZWlnaHQnKSA/PyA2MDAsXG59O1xuXG5cblxuYXN5bmMgZnVuY3Rpb24gY3JlYXRlV2luZG93KCkge1xuICBmdW5jdGlvbiBpc0luRnJhbWUoKSB7XG4gICAgY29uc3QgZGlzcGxheXMgPSBzY3JlZW4uZ2V0QWxsRGlzcGxheXMoKTtcbiAgICByZXR1cm4gZGlzcGxheXNcbiAgICAgIC5tYXAoZHAgPT4gZHAuYm91bmRzKVxuICAgICAgLmZpbHRlcihkcCA9PiBkcC54IDw9IHNldHRpbmdzLndpblggJiZcbiAgICAgICAgKGRwLnggKyBkcC53aWR0aCkgPj0gc2V0dGluZ3Mud2luWCAmJlxuICAgICAgICBkcC55IDw9IHNldHRpbmdzLndpblkgJiZcbiAgICAgICAgKGRwLnkgKyBkcC5oZWlnaHQpID49IHNldHRpbmdzLndpblkpWzBdICE9IG51bGw7XG4gIH1cbiAgY29uc3QgaW5GcmFtZSA9IGlzSW5GcmFtZSgpO1xuICBjb25zdCBicm93c2VyV2luZG93ID0gbmV3IEJyb3dzZXJXaW5kb3coe1xuICAgIHNob3c6IGZhbHNlLCAvLyBVc2UgdGhlICdyZWFkeS10by1zaG93JyBldmVudCB0byBzaG93IHRoZSBpbnN0YW50aWF0ZWQgQnJvd3NlcldpbmRvdy5cbiAgICB3ZWJQcmVmZXJlbmNlczoge1xuICAgICAgbm9kZUludGVncmF0aW9uOiBmYWxzZSxcbiAgICAgIGNvbnRleHRJc29sYXRpb246IHRydWUsXG4gICAgICBzYW5kYm94OiBmYWxzZSwgLy8gU2FuZGJveCBkaXNhYmxlZCBiZWNhdXNlIHRoZSBkZW1vIG9mIHByZWxvYWQgc2NyaXB0IGRlcGVuZCBvbiB0aGUgTm9kZS5qcyBhcGlcbiAgICAgIHdlYnZpZXdUYWc6IGZhbHNlLCAvLyBUaGUgd2VidmlldyB0YWcgaXMgbm90IHJlY29tbWVuZGVkLiBDb25zaWRlciBhbHRlcm5hdGl2ZXMgbGlrZSBhbiBpZnJhbWUgb3IgRWxlY3Ryb24ncyBCcm93c2VyVmlldy4gQHNlZSBodHRwczovL3d3dy5lbGVjdHJvbmpzLm9yZy9kb2NzL2xhdGVzdC9hcGkvd2Vidmlldy10YWcjd2FybmluZ1xuICAgICAgcHJlbG9hZDogam9pbihhcHAuZ2V0QXBwUGF0aCgpLCAncGFja2FnZXMvcHJlbG9hZC9kaXN0L2luZGV4LmNqcycpLFxuICAgIH0sXG4gICAgaWNvbjogam9pbihhcHAuZ2V0QXBwUGF0aCgpLCAncGFja2FnZXMvbWFpbi9hc3NldHMvaWNvbi5pY28nKSxcbiAgICBmcmFtZTogZmFsc2UsXG4gICAgbWluV2lkdGg6IDEyMDAsXG4gICAgbWluSGVpZ2h0OiA2MDAsXG4gICAgeDogaW5GcmFtZSA/IHNldHRpbmdzLndpblggOiAwLFxuICAgIHk6IGluRnJhbWUgPyBzZXR0aW5ncy53aW5ZIDogMCxcbiAgICB3aWR0aDogc2V0dGluZ3Mud2luV2lkdGgsXG4gICAgaGVpZ2h0OiBzZXR0aW5ncy53aW5IZWlnaHQsXG4gIH0pO1xuXG4gIC8qKlxuICAgKiBJZiB0aGUgJ3Nob3cnIHByb3BlcnR5IG9mIHRoZSBCcm93c2VyV2luZG93J3MgY29uc3RydWN0b3IgaXMgb21pdHRlZCBmcm9tIHRoZSBpbml0aWFsaXphdGlvbiBvcHRpb25zLFxuICAgKiBpdCB0aGVuIGRlZmF1bHRzIHRvICd0cnVlJy4gVGhpcyBjYW4gY2F1c2UgZmxpY2tlcmluZyBhcyB0aGUgd2luZG93IGxvYWRzIHRoZSBodG1sIGNvbnRlbnQsXG4gICAqIGFuZCBpdCBhbHNvIGhhcyBzaG93IHByb2JsZW1hdGljIGJlaGF2aW91ciB3aXRoIHRoZSBjbG9zaW5nIG9mIHRoZSB3aW5kb3cuXG4gICAqIFVzZSBgc2hvdzogZmFsc2VgIGFuZCBsaXN0ZW4gdG8gdGhlICBgcmVhZHktdG8tc2hvd2AgZXZlbnQgdG8gc2hvdyB0aGUgd2luZG93LlxuICAgKlxuICAgKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lbGVjdHJvbi9lbGVjdHJvbi9pc3N1ZXMvMjUwMTIgZm9yIHRoZSBhZmZvcmQgbWVudGlvbmVkIGlzc3VlLlxuICAgKi9cbiAgYnJvd3NlcldpbmRvdy5vbigncmVhZHktdG8tc2hvdycsICgpID0+IHtcbiAgICBicm93c2VyV2luZG93Py5zaG93KCk7XG5cbiAgICBpZiAoaW1wb3J0Lm1ldGEuZW52LkRFVikge1xuICAgICAgYnJvd3NlcldpbmRvdz8ud2ViQ29udGVudHMub3BlbkRldlRvb2xzKCk7XG4gICAgfVxuICB9KTtcblxuICAvKipcbiAgICogVVJMIGZvciBtYWluIHdpbmRvdy5cbiAgICogVml0ZSBkZXYgc2VydmVyIGZvciBkZXZlbG9wbWVudC5cbiAgICogYGZpbGU6Ly8uLi9yZW5kZXJlci9pbmRleC5odG1sYCBmb3IgcHJvZHVjdGlvbiBhbmQgdGVzdC5cbiAgICovXG4gIGNvbnN0IHBhZ2VVcmwgPVxuICAgIGltcG9ydC5tZXRhLmVudi5ERVYgJiYgaW1wb3J0Lm1ldGEuZW52LlZJVEVfREVWX1NFUlZFUl9VUkwgIT09IHVuZGVmaW5lZFxuICAgICAgPyBpbXBvcnQubWV0YS5lbnYuVklURV9ERVZfU0VSVkVSX1VSTFxuICAgICAgOiBuZXcgVVJMKCcuLi9yZW5kZXJlci9kaXN0L2luZGV4Lmh0bWwnLCAnZmlsZTovLycgKyBfX2Rpcm5hbWUpLnRvU3RyaW5nKCk7XG5cbiAgYXdhaXQgYnJvd3NlcldpbmRvdy5sb2FkVVJMKHBhZ2VVcmwpO1xuXG4gIGJyb3dzZXJXaW5kb3cub24oJ21vdmUnLCAoKSA9PiB7XG4gICAgY29uc3QgcG9zaXRpb24gPSBicm93c2VyV2luZG93LmdldFBvc2l0aW9uKCk7XG4gICAgc3RvcmUuc2V0KCd3aW5YJywgcG9zaXRpb25bMF0pO1xuICAgIHN0b3JlLnNldCgnd2luWScsIHBvc2l0aW9uWzFdKTtcbiAgfSk7XG5cbiAgYnJvd3NlcldpbmRvdy5vbigncmVzaXplJywgKCkgPT4ge1xuICAgIGNvbnN0IHNpemUgPSBicm93c2VyV2luZG93LmdldFNpemUoKTtcbiAgICBzdG9yZS5zZXQoJ3dpbldpZHRoJywgc2l6ZVswXSk7XG4gICAgc3RvcmUuc2V0KCd3aW5IZWlnaHQnLCBzaXplWzFdKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGJyb3dzZXJXaW5kb3c7XG59XG5cbi8qKlxuICogUmVzdG9yZSBhbiBleGlzdGluZyBCcm93c2VyV2luZG93IG9yIENyZWF0ZSBhIG5ldyBCcm93c2VyV2luZG93LlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcmVzdG9yZU9yQ3JlYXRlV2luZG93KCkge1xuICBsZXQgd2luZG93ID0gQnJvd3NlcldpbmRvdy5nZXRBbGxXaW5kb3dzKCkuZmluZCh3ID0+ICF3LmlzRGVzdHJveWVkKCkpO1xuXG4gIGlmICh3aW5kb3cgPT09IHVuZGVmaW5lZCkge1xuICAgIHdpbmRvdyA9IGF3YWl0IGNyZWF0ZVdpbmRvdygpO1xuICB9XG5cbiAgaWYgKHdpbmRvdy5pc01pbmltaXplZCgpKSB7XG4gICAgd2luZG93LnJlc3RvcmUoKTtcbiAgfVxuXG4gIHdpbmRvdy5mb2N1cygpO1xuICByZXR1cm4gd2luZG93O1xufVxuIiwiY2xhc3MgR2FtZUVsaW1pbmF0aW9uIHtcbiAgaWQ6IG51bWJlcjtcbiAgZ2FtZUlEOiBzdHJpbmc7XG4gIHRpbWU6IG51bWJlcjtcbiAga2lsbGVySUQ6IHN0cmluZztcbiAga2lsbGVkSUQ6IHN0cmluZztcbiAga25vY2tlZDogYm9vbGVhbjtcbiAgd2VhcG9uOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IoZGF0YSA9IHtcbiAgICBpZDogMCxcbiAgICBnYW1lSUQ6ICcnLFxuICAgIHRpbWU6IDAsXG4gICAga2lsbGVySUQ6ICcnLFxuICAgIGtpbGxlZElEOiAnJyxcbiAgICBrbm9ja2VkOiBmYWxzZSxcbiAgICB3ZWFwb246ICcnLFxuICB9KSB7XG4gICAgdGhpcy5pZCA9IGRhdGEuaWQ7XG4gICAgdGhpcy5nYW1lSUQgPSBkYXRhLmdhbWVJRC50b0xvd2VyQ2FzZSgpO1xuICAgIHRoaXMudGltZSA9IGRhdGEudGltZTtcbiAgICB0aGlzLmtpbGxlcklEID0gZGF0YS5raWxsZXJJRC50b0xvd2VyQ2FzZSgpO1xuICAgIHRoaXMua2lsbGVkSUQgPSBkYXRhLmtpbGxlZElELnRvTG93ZXJDYXNlKCk7XG4gICAgdGhpcy5rbm9ja2VkID0gZGF0YS5rbm9ja2VkO1xuICAgIHRoaXMud2VhcG9uID0gZGF0YS53ZWFwb247XG4gIH1cbn1cblxuZXhwb3J0IHsgR2FtZUVsaW1pbmF0aW9uIH07XG4iLCJjbGFzcyBHYW1lUGxheWVyIHtcbiAgaWQ6IG51bWJlcjtcbiAgcGxheWVySUQ6IHN0cmluZztcbiAgZ2FtZUlEOiBzdHJpbmc7XG4gIGlzQm90OiBib29sZWFuO1xuICB0ZWFtOiBudW1iZXI7XG4gIGtpbGxzOiBudW1iZXI7XG4gIHBsYWNlbWVudDogbnVtYmVyO1xuXG4gIGNvbnN0cnVjdG9yKGRhdGEgPSB7XG4gICAgaWQ6IDAsXG4gICAgcGxheWVySUQ6ICcnLFxuICAgIGdhbWVJRDogJycsXG4gICAgaXNCb3Q6IHRydWUsXG4gICAgdGVhbTogMCxcbiAgICBraWxsczogMCxcbiAgICBwbGFjZW1lbnQ6IDk5OSxcbiAgfSkge1xuICAgIHRoaXMuaWQgPSBkYXRhLmlkO1xuICAgIHRoaXMucGxheWVySUQgPSBkYXRhLnBsYXllcklEO1xuICAgIHRoaXMuZ2FtZUlEID0gZGF0YS5nYW1lSUQ7XG4gICAgdGhpcy5pc0JvdCA9IGRhdGEuaXNCb3Q7XG4gICAgdGhpcy50ZWFtID0gZGF0YS50ZWFtO1xuICAgIHRoaXMua2lsbHMgPSBkYXRhLmtpbGxzO1xuICAgIHRoaXMucGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQ7XG4gIH1cbn1cblxuZXhwb3J0IHsgR2FtZVBsYXllciB9O1xuIiwiY2xhc3MgR2FtZVN0YXQge1xuICBnYW1lSUQ6IHN0cmluZztcbiAgb3duZXI6IHN0cmluZztcbiAgdGltZXN0YW1wOiBEYXRlO1xuICByZXBsYXlOYW1lOiBzdHJpbmc7XG4gIG1vZGU6IHN0cmluZztcbiAgYm90czogbnVtYmVyO1xuICBwbGF5ZXJzOiBudW1iZXI7XG4gIGR1cmF0aW9uOiBudW1iZXI7XG4gIHBsYWNlbWVudDogbnVtYmVyO1xuICBraWxsczogbnVtYmVyO1xuICBhc3Npc3RzOiBudW1iZXI7XG4gIGFjY3VyYWN5OiBudW1iZXI7XG4gIGRhbWFnZURlYWx0OiBudW1iZXI7XG4gIGRhbWFnZVRha2VuOiBudW1iZXI7XG4gIGRpc3RhbmNlVHJhdmVsbGVkOiBudW1iZXI7XG5cbiAgY29uc3RydWN0b3IoZGF0YSA9IHtcbiAgICBnYW1lSUQ6ICcnLFxuICAgIG93bmVyOiAnJyxcbiAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCksXG4gICAgcmVwbGF5TmFtZTogJycsXG4gICAgbW9kZTogJycsXG4gICAgYm90czogMCxcbiAgICBwbGF5ZXJzOiAwLFxuICAgIGR1cmF0aW9uOiAwLFxuICAgIHBsYWNlbWVudDogMCxcbiAgICBraWxsczogMCxcbiAgICBhc3Npc3RzOiAwLFxuICAgIGFjY3VyYWN5OiAwLFxuICAgIGRhbWFnZURlYWx0OiAwLFxuICAgIGRhbWFnZVRha2VuOiAwLFxuICAgIGRpc3RhbmNlVHJhdmVsbGVkOiAwLFxuICB9KSB7XG4gICAgdGhpcy5nYW1lSUQgPSBkYXRhLmdhbWVJRC50b0xvd2VyQ2FzZSgpO1xuICAgIHRoaXMub3duZXIgPSBkYXRhLm93bmVyLnRvTG93ZXJDYXNlKCk7XG4gICAgdGhpcy50aW1lc3RhbXAgPSBkYXRhLnRpbWVzdGFtcDtcbiAgICB0aGlzLnJlcGxheU5hbWUgPSBkYXRhLnJlcGxheU5hbWU7XG4gICAgdGhpcy5tb2RlID0gZGF0YS5tb2RlO1xuICAgIHRoaXMuYm90cyA9IGRhdGEuYm90cztcbiAgICB0aGlzLnBsYXllcnMgPSBkYXRhLnBsYXllcnM7XG4gICAgdGhpcy5kdXJhdGlvbiA9IGRhdGEuZHVyYXRpb247XG4gICAgdGhpcy5wbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudDtcbiAgICB0aGlzLmtpbGxzID0gZGF0YS5raWxscztcbiAgICB0aGlzLmFzc2lzdHMgPSBkYXRhLmFzc2lzdHM7XG4gICAgdGhpcy5hY2N1cmFjeSA9IGRhdGEuYWNjdXJhY3k7XG4gICAgdGhpcy5kYW1hZ2VEZWFsdCA9IGRhdGEuZGFtYWdlRGVhbHQ7XG4gICAgdGhpcy5kYW1hZ2VUYWtlbiA9IGRhdGEuZGFtYWdlVGFrZW47XG4gICAgdGhpcy5kaXN0YW5jZVRyYXZlbGxlZCA9IGRhdGEuZGlzdGFuY2VUcmF2ZWxsZWQ7XG4gIH1cbn1cblxuZXhwb3J0IHsgR2FtZVN0YXQgfTtcbiIsImNsYXNzIFBsYXllciB7XG4gIHBsYXllcklEOiBzdHJpbmc7XG4gIHVzZXJuYW1lOiBzdHJpbmc7XG4gIGlzQm90OiBib29sZWFuO1xuICBwbGF0Zm9ybTogc3RyaW5nO1xuICBza2luOiBzdHJpbmc7XG4gIHNuaXBlczogbnVtYmVyO1xuXG4gIGNvbnN0cnVjdG9yKGRhdGEgPSB7XG4gICAgcGxheWVySUQ6ICcnLFxuICAgIHVzZXJuYW1lOiAnQUknLFxuICAgIGlzQm90OiB0cnVlLFxuICAgIHBsYXRmb3JtOiAnZXBpYycsXG4gICAgc2tpbjogJ2VwaWMnLFxuICAgIHNuaXBlczogMCxcbiAgfSkge1xuICAgIHRoaXMucGxheWVySUQgPSBkYXRhLnBsYXllcklELnRvTG93ZXJDYXNlKCk7XG4gICAgdGhpcy51c2VybmFtZSA9IGRhdGEudXNlcm5hbWU7XG4gICAgdGhpcy5pc0JvdCA9IGRhdGEuaXNCb3Q7XG4gICAgdGhpcy5wbGF0Zm9ybSA9IGRhdGEucGxhdGZvcm07XG4gICAgdGhpcy5za2luID0gZGF0YS5za2luO1xuICAgIHRoaXMuc25pcGVzID0gZGF0YS5zbmlwZXM7XG4gIH1cbn1cblxuZXhwb3J0IHsgUGxheWVyIH07XG4iLCJpbXBvcnQge0RhdGFiYXNlIGFzIHNxbGl0ZX0gZnJvbSAnc3FsaXRlMyc7XG5pbXBvcnQge0dhbWVFbGltaW5hdGlvbn0gZnJvbSAnLi9tb2RlbHMvR2FtZUVsaW1pbmF0aW9uJztcbmltcG9ydCB7R2FtZVBsYXllcn0gZnJvbSAnLi9tb2RlbHMvR2FtZVBsYXllcic7XG5pbXBvcnQge0dhbWVTdGF0fSBmcm9tICcuL21vZGVscy9HYW1lU3RhdHMnO1xuaW1wb3J0IHtQbGF5ZXJ9IGZyb20gJy4vbW9kZWxzL1BsYXllcic7XG5cbmNvbnN0IGluaXRTdGF0ZW1lbnRzID0gW1xuICBgQ1JFQVRFIFRBQkxFIElGIE5PVCBFWElTVFMgJ0dhbWVFbGltaW5hdGlvbnMnIChcbiAgICAnaWQnIElOVEVHRVIgUFJJTUFSWSBLRVkgQVVUT0lOQ1JFTUVOVCxcbiAgICAnZ2FtZUlEJyBWQVJDSEFSKDI1NSkgTk9UIE5VTEwsXG4gICAgJ3RpbWUnIElOVEVHRVIgTk9UIE5VTEwsXG4gICAgJ2tpbGxlcklEJyBWQVJDSEFSKDI1NSkgTk9UIE5VTEwsXG4gICAgJ2tpbGxlZElEJyBWQVJDSEFSKDI1NSkgTk9UIE5VTEwsXG4gICAgJ2tub2NrZWQnIFRJTllJTlQoMSkgTk9UIE5VTEwsXG4gICAgJ3dlYXBvbicgVkFSQ0hBUigyNTUpIE5PVCBOVUxMXG4gIClgLFxuICBgQ1JFQVRFIFRBQkxFIElGIE5PVCBFWElTVFMgJ0dhbWVQbGF5ZXJzJyAoXG4gICAgJ2lkJyBJTlRFR0VSIFBSSU1BUlkgS0VZIEFVVE9JTkNSRU1FTlQsXG4gICAgJ3BsYXllcklEJyBWQVJDSEFSKDI1NSkgTk9UIE5VTEwsXG4gICAgJ2dhbWVJRCcgVkFSQ0hBUigyNTUpIE5PVCBOVUxMLFxuICAgICdpc0JvdCcgVElOWUlOVCgxKSBOT1QgTlVMTCxcbiAgICAndGVhbScgSU5URUdFUiBOT1QgTlVMTCxcbiAgICAna2lsbHMnIElOVEVHRVIgTk9UIE5VTEwgREVGQVVMVCAwLFxuICAgICdwbGFjZW1lbnQnIElOVEVHRVIgTk9UIE5VTExcbiAgKWAsXG4gIGBDUkVBVEUgVEFCTEUgSUYgTk9UIEVYSVNUUyAnR2FtZVN0YXRzJyAoXG4gICAgJ2dhbWVJRCcgVkFSQ0hBUigyNTUpIE5PVCBOVUxMIFVOSVFVRSBQUklNQVJZIEtFWSxcbiAgICAnb3duZXInIFZBUkNIQVIoMjU1KSBOT1QgTlVMTCxcbiAgICAndGltZXN0YW1wJyBEQVRFVElNRSBOT1QgTlVMTCBVTklRVUUsXG4gICAgJ3JlcGxheU5hbWUnIFZBUkNIQVIoMjU1KSBOT1QgTlVMTCxcbiAgICAnbW9kZScgVkFSQ0hBUigyNTUpIE5PVCBOVUxMLFxuICAgICdib3RzJyBJTlRFR0VSIE5PVCBOVUxMLFxuICAgICdwbGF5ZXJzJyBJTlRFR0VSIE5PVCBOVUxMLFxuICAgICdkdXJhdGlvbicgSU5URUdFUiBERUZBVUxUIC0xLFxuICAgICdwbGFjZW1lbnQnIElOVEVHRVIgTk9UIE5VTEwsXG4gICAgJ2tpbGxzJyBJTlRFR0VSIERFRkFVTFQgLTEsXG4gICAgJ2Fzc2lzdHMnIElOVEVHRVIgREVGQVVMVCAwLFxuICAgICdhY2N1cmFjeScgRE9VQkxFIFBSRUNJU0lPTiBERUZBVUxUICctMScsXG4gICAgJ2RhbWFnZURlYWx0JyBJTlRFR0VSIERFRkFVTFQgLTEsXG4gICAgJ2RhbWFnZVRha2VuJyBJTlRFR0VSIERFRkFVTFQgLTEsXG4gICAgJ2Rpc3RhbmNlVHJhdmVsbGVkJyBET1VCTEUgUFJFQ0lTSU9OIERFRkFVTFQgJy0xJ1xuICApYCxcbiAgYENSRUFURSBUQUJMRSBJRiBOT1QgRVhJU1RTICdQbGF5ZXJzJyAoXG4gICAgJ3BsYXllcklEJyBWQVJDSEFSKDI1NSkgTk9UIE5VTEwgVU5JUVVFIFBSSU1BUlkgS0VZLFxuICAgICd1c2VybmFtZScgVkFSQ0hBUigyNTUpIE5PVCBOVUxMLFxuICAgICdpc0JvdCcgVkFSQ0hBUigyNTUpIE5PVCBOVUxMLFxuICAgICdwbGF0Zm9ybScgVkFSQ0hBUigyNTUpLFxuICAgICdza2luJyBWQVJDSEFSKDI1NSksXG4gICAgJ3NuaXBlcycgSU5URUdFUiBOT1QgTlVMTCBERUZBVUxUIDFcbiAgKWAsXG5dO1xuXG5hc3luYyBmdW5jdGlvbiBnZXRBbGwoc3FsOnN0cmluZyk6UHJvbWlzZTxhbnlbXT4ge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgIGRiLmRhdGFiYXNlLmFsbChzcWwsIGZ1bmN0aW9uIChlcnIsIHJvd3MpIHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgcmV0dXJuIHJlamVjdChlcnIpO1xuICAgICAgfVxuICAgICAgcmVzb2x2ZShyb3dzKTtcbiAgICB9KTtcbiAgfSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHNlcmlhbGl6ZShzcWw6c3RyaW5nW10pOlByb21pc2U8Ym9vbGVhbj4ge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGRiLmRhdGFiYXNlLnNlcmlhbGl6ZSgoKSA9PiB7XG4gICAgICBmdW5jdGlvbiBkYlJ1bih4Om51bWJlcikge1xuICAgICAgICBpZiAoeCA8IHNxbC5sZW5ndGgpIHtcbiAgICAgICAgICBkYi5kYXRhYmFzZS5ydW4oc3FsW3hdLCAoZXJyKSA9PiB7XG4gICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICAgICAgICAgIHJldHVybiByZWplY3QoZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7IGRiUnVuKCsreCk7IH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXNvbHZlKHRydWUpO1xuICAgICAgfVxuICAgICAgZGJSdW4oMCk7XG4gICAgfSk7XG4gIH0pO1xufVxuXG5hc3luYyBmdW5jdGlvbiBleGVjKHNxbDpzdHJpbmcpOlByb21pc2U8Ym9vbGVhbj4ge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgIGRiLmRhdGFiYXNlLmV4ZWMoc3FsLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICAgIHJldHVybiByZWplY3QoZmFsc2UpO1xuICAgICAgfVxuICAgICAgcmVzb2x2ZSh0cnVlKTtcbiAgICB9KTtcbiAgfSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldFNpbmdsZShzcWw6c3RyaW5nKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgZGIuZGF0YWJhc2UuZ2V0KHNxbCwgZnVuY3Rpb24gKGVyciwgcm93cykge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgICByZXR1cm4gcmVqZWN0KGVycik7XG4gICAgICB9XG4gICAgICByZXNvbHZlKHJvd3MpO1xuICAgIH0pO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gd2hlcmVJbkdlbmVyYXRvcihkYXRhOnN0cmluZ1tdKSB7XG4gIHJldHVybiBgKCR7J1xcJycgKyBkYXRhLmpvaW4oJ1xcJyxcXCcnKSArICdcXCcnfSlgO1xufVxuXG5jbGFzcyBEYXRhYmFzZSB7XG4gIGRhdGFiYXNlOiBzcWxpdGU7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5kYXRhYmFzZSA9IG5ldyBzcWxpdGUoJ2RhdGFiYXNlLmRiJywgKGVycikgPT4ge1xuICAgICAgaWYgKGVycikgY29uc29sZS5lcnJvcignRGF0YWJhc2Ugb3BlbmluZyBlcnJvcjogJywgZXJyKTtcbiAgICB9KTtcbiAgICBpbml0U3RhdGVtZW50cy5mb3JFYWNoKChzcWwpID0+IHtcbiAgICAgIHRoaXMuZGF0YWJhc2UucnVuKHNxbCk7XG4gICAgfSk7XG4gIH1cblxuICBhZGRSZXBsYXkgPSBhc3luYyAoZ2FtZXJzOkdhbWVQbGF5ZXJbXSwga2lsbHM6R2FtZUVsaW1pbmF0aW9uW10sIHBsYXllcnM6UGxheWVyW10sIHN0YXQ6R2FtZVN0YXQpID0+IHtcbiAgICBmdW5jdGlvbiBlc2NhcGUobGluZTpzdHJpbmcpIHtcbiAgICAgIHJldHVybiBsaW5lLnJlcGxhY2VBbGwoXCInXCIsIFwiJydcIik7XG4gICAgfVxuICAgIGxldCBzcWw6c3RyaW5nO1xuICAgIHNxbCA9IGBJTlNFUlQgSU5UTyBHYW1lU3RhdHMgVkFMVUVTICgnJHtzdGF0LmdhbWVJRH0nLCAnJHtzdGF0Lm93bmVyfScsICcke3N0YXQudGltZXN0YW1wLnRvSVNPU3RyaW5nKCl9JywgJyR7ZXNjYXBlKHN0YXQucmVwbGF5TmFtZSl9JywgJyR7c3RhdC5tb2RlfScsICR7c3RhdC5ib3RzfSwgJHtzdGF0LnBsYXllcnN9LCAke3N0YXQuZHVyYXRpb259LCAke3N0YXQucGxhY2VtZW50fSwgJHtzdGF0LmtpbGxzfSwgJHtzdGF0LmFzc2lzdHN9LCAke3N0YXQuYWNjdXJhY3l9LCAke3N0YXQuZGFtYWdlRGVhbHR9LCAke3N0YXQuZGFtYWdlVGFrZW59LCAke3N0YXQuZGlzdGFuY2VUcmF2ZWxsZWR9KWA7XG4gICAgaWYgKCFhd2FpdCBleGVjKHNxbCkpIHsgcmV0dXJuIGZhbHNlOyB9XG4gICAgc3FsID0gYElOU0VSVCBJTlRPIEdhbWVQbGF5ZXJzIFZBTFVFUyAke2dhbWVycy5tYXAoZyA9PiBgKE5VTEwsICcke2cucGxheWVySUR9JywgJyR7Zy5nYW1lSUR9JywgJHtnLmlzQm90ID8gMSA6IDB9LCAke2cudGVhbX0sICR7Zy5raWxsc30sICR7Zy5wbGFjZW1lbnR9KWApLmpvaW4oJywgJyl9YDtcbiAgICBpZiAoIWF3YWl0IGV4ZWMoc3FsKSkgeyByZXR1cm4gZmFsc2U7IH1cbiAgICBpZiAoa2lsbHMubGVuZ3RoID4gMCkge1xuICAgICAgc3FsID0gYElOU0VSVCBJTlRPIEdhbWVFbGltaW5hdGlvbnMgVkFMVUVTICR7a2lsbHMubWFwKGsgPT4gYChOVUxMLCAnJHtrLmdhbWVJRH0nLCAke2sudGltZX0sICcke2sua2lsbGVySUR9JywgJyR7ay5raWxsZWRJRH0nLCAke2sua25vY2tlZH0sICcke2sud2VhcG9ufScpYCkuam9pbignLCAnKX1gO1xuICAgICAgaWYgKCFhd2FpdCBleGVjKHNxbCkpIHsgcmV0dXJuIGZhbHNlOyB9XG4gICAgfVxuICAgIGNvbnN0IHNlcmlhbGl6ZXFsOnN0cmluZ1tdID0gW107XG4gICAgY29uc3QgcGxheWVyU3FsOnN0cmluZ1tdID0gW107XG4gICAgZm9yIChsZXQgeCA9IDA7IHggPCBwbGF5ZXJzLmxlbmd0aDsgeCsrKSB7XG4gICAgICBjb25zdCBwID0gcGxheWVyc1t4XTtcbiAgICAgIGNvbnN0IGV4aXN0aW5nUGxheWVyID0gYXdhaXQgdGhpcy5nZXRQbGF5ZXIocC5wbGF5ZXJJRCk7XG4gICAgICBjb25zdCBwbGF0Zm9ybSA9IHAucGxhdGZvcm0gPT0gbnVsbCA/ICdOVUxMJyA6IGAnJHtwLnBsYXRmb3JtfSdgO1xuICAgICAgbGV0IHNraW4gPSBwLnNraW4gPT0gbnVsbCA/ICdOVUxMJyA6IGAnJHtwLnNraW59J2A7XG4gICAgICBpZiAoZXhpc3RpbmdQbGF5ZXIgIT0gbnVsbCkge1xuICAgICAgICBpZiAoZXhpc3RpbmdQbGF5ZXIuc2tpbiAhPSBudWxsICYmIHNraW4gPT0gJ05VTEwnKSB7XG4gICAgICAgICAgc2tpbiA9IGV4aXN0aW5nUGxheWVyLnNraW47XG4gICAgICAgIH1cbiAgICAgICAgc2VyaWFsaXplcWwucHVzaChgVVBEQVRFIFBsYXllcnMgU0VUIHNuaXBlcyA9IHNuaXBlcyArIDEsIHBsYXRmb3JtID0gJHtwbGF0Zm9ybX0sIHVzZXJuYW1lID0gJyR7ZXNjYXBlKHAudXNlcm5hbWUpfScsIHNraW4gPSAke3NraW59IFdIRVJFIHBsYXllcklEID0gJyR7cC5wbGF5ZXJJRH0nYCk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgcGxheWVyU3FsLnB1c2goYCgnJHtwLnBsYXllcklEfScsICcke2VzY2FwZShwLnVzZXJuYW1lKX0nLCAke3AuaXNCb3R9LCAke3BsYXRmb3JtfSwgJHtza2lufSwgJHtwLnNuaXBlc30pYCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwbGF5ZXJTcWwubGVuZ3RoID4gMCkge1xuICAgICAgc3FsID0gKGBJTlNFUlQgSU5UTyBQbGF5ZXJzIFZBTFVFUyAke3BsYXllclNxbC5qb2luKCcsICcpfWApO1xuICAgICAgaWYgKCFhd2FpdCBleGVjKHNxbCkpIHsgcmV0dXJuIGZhbHNlOyB9XG4gICAgfVxuICAgIHJldHVybiBhd2FpdCBzZXJpYWxpemUoc2VyaWFsaXplcWwpO1xuICB9O1xuXG4gIGdldE1hdGNoSGlzdG9yeSA9IGFzeW5jIChwYWdlID0gMSk6UHJvbWlzZTxHYW1lU3RhdFtdPiA9PiB7XG4gICAgY29uc3QgbGltaXQgPSAyNTtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBnZXRBbGwoYFNFTEVDVCAqIEZST00gR2FtZVN0YXRzIE9SREVSIEJZIHRpbWVzdGFtcCBERVNDIExJTUlUICR7bGltaXR9IE9GRlNFVCAkeyhsaW1pdCAqIHBhZ2UpIC0gbGltaXR9YCk7XG4gICAgY29uc3QgbWF0Y2hlczpHYW1lU3RhdFtdID0gW107XG4gICAgcmVzdWx0LmZvckVhY2goZSA9PiB7XG4gICAgICBtYXRjaGVzLnB1c2gobmV3IEdhbWVTdGF0KGUpKTtcbiAgICB9KTtcbiAgICByZXR1cm4gbWF0Y2hlcztcbiAgfTtcblxuICBnZXRHYW1lckhpc3RvcnkgPSBhc3luYyAocGFnZSA9IDEsIHBsYXllcklEOnN0cmluZyk6UHJvbWlzZTxHYW1lU3RhdFtdPiA9PiB7XG4gICAgY29uc3QgbGltaXQgPSAyNTtcbiAgICBjb25zdCBtYXRjaGVzOkdhbWVTdGF0W10gPSBbXTtcbiAgICBjb25zdCBnYW1lckdhbWVzID0gYXdhaXQgZ2V0QWxsKGBTRUxFQ1QgZ2FtZUlEIEZST00gR2FtZVBsYXllcnMgV0hFUkUgcGxheWVySUQgPSAnJHtwbGF5ZXJJRH0nYCk7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZ2V0QWxsKGBTRUxFQ1QgKiBGUk9NIEdhbWVTdGF0cyBXSEVSRSBnYW1lSUQgSU4gJHt3aGVyZUluR2VuZXJhdG9yKGdhbWVyR2FtZXMubWFwKGcgPT4gZy5nYW1lSUQpKX0gT1JERVIgQlkgdGltZXN0YW1wIERFU0MgTElNSVQgJHtsaW1pdH0gT0ZGU0VUICR7KGxpbWl0ICogcGFnZSkgLSBsaW1pdH1gKTtcbiAgICByZXN1bHQuZm9yRWFjaChlID0+IHtcbiAgICAgIG1hdGNoZXMucHVzaChuZXcgR2FtZVN0YXQoZSkpO1xuICAgIH0pO1xuICAgIHJldHVybiBtYXRjaGVzO1xuICB9O1xuXG4gIGdldEVsaW1pbmF0aW9ucyA9IGFzeW5jIChnYW1lSUQ6IHN0cmluZyk6IFByb21pc2U8R2FtZUVsaW1pbmF0aW9uW10+ID0+IHtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBnZXRBbGwoYFNFTEVDVCAqIEZST00gR2FtZUVsaW1pbmF0aW9ucyBXSEVSRSBnYW1lSUQ9JyR7Z2FtZUlEfScgT1JERVIgQlkgaWRgKTtcbiAgICBjb25zdCBlbGltaW5hdGlvbnM6R2FtZUVsaW1pbmF0aW9uW10gPSBbXTtcbiAgICByZXN1bHQuZm9yRWFjaChlID0+IHtcbiAgICAgIGVsaW1pbmF0aW9ucy5wdXNoKG5ldyBHYW1lRWxpbWluYXRpb24oZSkpO1xuICAgIH0pO1xuICAgIHJldHVybiBlbGltaW5hdGlvbnM7XG4gIH07XG5cbiAgZ2V0R2FtZXJzID0gYXN5bmMgKGdhbWVJRDogc3RyaW5nKTogUHJvbWlzZTxHYW1lUGxheWVyW10+ID0+IHtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBnZXRBbGwoYFNFTEVDVCAqIEZST00gR2FtZVBsYXllcnMgV0hFUkUgZ2FtZUlEPScke2dhbWVJRH0nIE9SREVSIEJZIHRlYW1gKTtcbiAgICBjb25zdCBnYW1lcnM6R2FtZVBsYXllcltdID0gW107XG4gICAgcmVzdWx0LmZvckVhY2goZSA9PiB7XG4gICAgICBnYW1lcnMucHVzaChuZXcgR2FtZVBsYXllcihlKSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGdhbWVycztcbiAgfTtcblxuICBnZXRHYW1lclBsYXllcnMgPSAgYXN5bmMgKGdhbWVyczogR2FtZVBsYXllcltdKTogUHJvbWlzZTxQbGF5ZXJbXT4gPT4ge1xuICAgIGNvbnN0IGZpbHRlcmVkID0gZ2FtZXJzLm1hcChnID0+IGAke2cucGxheWVySUR9YCk7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZ2V0QWxsKGBTRUxFQ1QgKiBGUk9NIFBsYXllcnMgV0hFUkUgcGxheWVySUQgSU4gJHt3aGVyZUluR2VuZXJhdG9yKGZpbHRlcmVkKX1gKTtcbiAgICBjb25zdCBwbGF5ZXJzOlBsYXllcltdID0gW107XG4gICAgcmVzdWx0LmZvckVhY2goZSA9PiB7XG4gICAgICBwbGF5ZXJzLnB1c2gobmV3IFBsYXllcihlKSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHBsYXllcnM7XG4gIH07XG5cbiAgZ2V0R2FtZVN0YXRzID0gYXN5bmMgKGdhbWVJRDogc3RyaW5nKTogUHJvbWlzZTxHYW1lU3RhdD4gPT4ge1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGdldFNpbmdsZShgU0VMRUNUICogRlJPTSBHYW1lU3RhdHMgV0hFUkUgZ2FtZUlEPScke2dhbWVJRH0nYCk7XG4gICAgcmV0dXJuIG5ldyBHYW1lU3RhdChyZXN1bHQpO1xuICB9O1xuXG4gIGdldFBsYXllciA9IGFzeW5jIChwbGF5ZXJJRDogc3RyaW5nKTogUHJvbWlzZTxQbGF5ZXI+ID0+IHtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBnZXRTaW5nbGUoYFNFTEVDVCAqIEZST00gUGxheWVycyBXSEVSRSBwbGF5ZXJJRD0nJHtwbGF5ZXJJRH0nYCkgYXMgUGxheWVyO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgZ2V0UGxheWVycyA9IGFzeW5jICgpOiBQcm9taXNlPFBsYXllcltdPiA9PiB7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZ2V0QWxsKGBTRUxFQ1QgKiBGUk9NIFBsYXllcnNgKTtcbiAgICByZXR1cm4gKHJlc3VsdCkgYXMgUGxheWVyW107XG4gIH1cblxuICBnZXRQbGF5ZXJHYW1lcyA9IGFzeW5jIChwbGF5ZXJJRDogc3RyaW5nKTogUHJvbWlzZTxHYW1lU3RhdFtdPiA9PiB7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZ2V0QWxsKGBTRUxFQ1QgKiBGUk9NIEdhbWVQbGF5ZXJzIFdIRVJFIHBsYXllcklEPScke3BsYXllcklEfSdgKTtcbiAgICBjb25zdCBzdGF0czpHYW1lU3RhdFtdID0gW107XG4gICAgcmVzdWx0LmZvckVhY2goZSA9PiB7XG4gICAgICBzdGF0cy5wdXNoKG5ldyBHYW1lU3RhdChlKSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHN0YXRzO1xuICB9O1xuXG4gIGdldExhc3RHYW1lSUQgPSBhc3luYygpOiBQcm9taXNlPHN0cmluZz4gPT4ge1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGdldFNpbmdsZSgnU0VMRUNUICogRlJPTSBHYW1lU3RhdHMgT1JERVIgQlkgdGltZXN0YW1wIERFU0MgTElNSVQgMScpO1xuICAgIHJldHVybiByZXN1bHQgIT0gbnVsbCA/IHJlc3VsdC5nYW1lSUQgOiBudWxsO1xuICB9O1xuXG4gIGdldFNuaXBlcnMgPSBhc3luYygpOiBQcm9taXNlPFBsYXllcltdPiA9PiB7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZ2V0QWxsKCdTRUxFQ1QgKiBGUk9NIFBsYXllcnMgT1JERVIgQlkgc25pcGVzIERFU0MnKTtcbiAgICBjb25zdCBwbGF5ZXJzOlBsYXllcltdID0gW107XG4gICAgcmVzdWx0LmZvckVhY2goZSA9PiB7XG4gICAgICBwbGF5ZXJzLnB1c2gobmV3IFBsYXllcihlKSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHBsYXllcnM7XG4gIH07XG5cbiAgZ2V0TGFzdEdhbWUgPSBhc3luYygpOiBQcm9taXNlPEdhbWVTdGF0IHwgbnVsbD4gPT4ge1xuICAgIHJldHVybiBhd2FpdCBnZXRTaW5nbGUoJ1NFTEVDVCAqIEZST00gR2FtZVN0YXRzIE9SREVSIEJZIFRpbWVzdGFtcCBERVNDIExJTUlUIDEnKSBhcyBHYW1lU3RhdDtcbiAgfTtcblxuICBkZWxldGVNYXRjaCA9IGFzeW5jKGdhbWVJRDogc3RyaW5nKTogUHJvbWlzZTxib29sZWFuPiA9PiB7XG4gICAgYXdhaXQgZXhlYyhgREVMRVRFIEZST00gR2FtZVN0YXRzIFdIRVJFIGdhbWVJRD0nJHtnYW1lSUR9J2ApO1xuICAgIGF3YWl0IGV4ZWMoYFVQREFURSBQbGF5ZXJzIFNFVCBzbmlwZXMgPSBzbmlwZXMgLSAxIFdIRVJFIHBsYXllcklEIElOIChTRUxFQ1QgcGxheWVySUQgRlJPTSBHYW1lUGxheWVycyBXSEVSRSBnYW1lSUQgPSAnJHtnYW1lSUR9JylgKTtcbiAgICBhd2FpdCBleGVjKGBERUxFVEUgRlJPTSBHYW1lUGxheWVycyBXSEVSRSBnYW1lSUQ9JyR7Z2FtZUlEfSdgKTtcbiAgICByZXR1cm4gYXdhaXQgZXhlYyhgREVMRVRFIEZST00gR2FtZUVsaW1pbmF0aW9ucyBXSEVSRSBnYW1lSUQ9JyR7Z2FtZUlEfSdgKTtcbiAgfTtcbn1cblxuZXhwb3J0IGNvbnN0IGRiID0gbmV3IERhdGFiYXNlKCk7IiwiZXhwb3J0IGNvbnN0IEd1blR5cGUgPSB7XHJcbiAgMDogXCJTdG9ybVwiLFxyXG4gIDE6IFwiRmFsbFwiLFxyXG4gIDI6IFwiUGlzdG9sXCIsXHJcbiAgMzogXCJTaG90Z3VuXCIsXHJcbiAgNDogXCJSaWZsZVwiLFxyXG4gIDU6IFwiU01HXCIsXHJcbiAgNjogXCJTbmlwZXJcIixcclxuICA3OiBcIk5vU2NvcGVcIixcclxuICA4OiBcIlBpY2theGVcIixcclxuICAxMDogXCJHcmVuYWRlXCIsXHJcbiAgMTE6IFwiQzRcIixcclxuICAxMjogXCJHcmVuYWRlTGF1bmNoZXJcIixcclxuICAxMzogXCJFeHBsb3NpdmVzXCIsXHJcbiAgMTQ6IFwiTWluaWd1blwiLFxyXG4gIDE1OiBcIkJvd1wiLFxyXG4gIDE2OiBcIlRyYXBcIixcclxuICAxNzogXCJGaW5hbGx5RWxpbWluYXRlZFwiLFxyXG4gIDIzOiBcIlZlaGljbGVcIixcclxuICAzMDogXCJTdGlua1wiLFxyXG4gIDMxOiBcIldhdGVyXCIsXHJcbiAgMzI6IFwiVHVycmV0XCIsXHJcbiAgNDg6IFwiVW5rbm93blwiXHJcbn1cclxuXHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFJlcGxheURhdGEge1xyXG4gIEVsaW1pbmF0aW9ucz86IChFbGltaW5hdGlvbnNFbnRpdHkpW10gfCBudWxsO1xyXG4gIFN0YXRzPzogU3RhdHM7XHJcbiAgVGVhbVN0YXRzPzogVGVhbVN0YXRzO1xyXG4gIEdhbWVEYXRhOiBHYW1lRGF0YTtcclxuICBUZWFtRGF0YT86IChUZWFtRGF0YUVudGl0eSlbXSB8IG51bGw7XHJcbiAgUGxheWVyRGF0YT86IChQbGF5ZXJEYXRhRW50aXR5KVtdIHwgbnVsbDtcclxuICBLaWxsRmVlZD86IChLaWxsRmVlZEVudGl0eSlbXSB8IG51bGw7XHJcbiAgTWFwRGF0YTogTWFwRGF0YTtcclxuICBJbmZvOiBJbmZvO1xyXG4gIEhlYWRlcjogSGVhZGVyO1xyXG59XHJcbmV4cG9ydCBpbnRlcmZhY2UgRWxpbWluYXRpb25zRW50aXR5IHtcclxuICBFbGltaW5hdGVkSW5mbzogRWxpbWluYXRlZEluZm9PckVsaW1pbmF0b3JJbmZvO1xyXG4gIEVsaW1pbmF0b3JJbmZvOiBFbGltaW5hdGVkSW5mb09yRWxpbWluYXRvckluZm87XHJcbiAgRWxpbWluYXRlZDogc3RyaW5nO1xyXG4gIEVsaW1pbmF0b3I6IHN0cmluZztcclxuICBHdW5UeXBlOiBudW1iZXI7XHJcbiAgVGltZTogc3RyaW5nO1xyXG4gIEtub2NrZWQ6IGJvb2xlYW47XHJcbiAgSXNTZWxmRWxpbWluYXRpb246IGJvb2xlYW47XHJcbiAgSXNWYWxpZExvY2F0aW9uOiBib29sZWFuO1xyXG4gIERpc3RhbmNlOiBudW1iZXI7XHJcbiAgSW5mbzogSW5mbzE7XHJcbn1cclxuZXhwb3J0IGludGVyZmFjZSBFbGltaW5hdGVkSW5mb09yRWxpbWluYXRvckluZm8ge1xyXG4gIElkOiBzdHJpbmc7XHJcbiAgUGxheWVyVHlwZTogbnVtYmVyO1xyXG4gIFJvdGF0aW9uOiBSb3RhdGlvbjtcclxuICBMb2NhdGlvbjogTG9jYXRpb25PclNjYWxlT3JEZWF0aExvY2F0aW9uO1xyXG4gIFNjYWxlOiBMb2NhdGlvbk9yU2NhbGVPckRlYXRoTG9jYXRpb247XHJcbiAgSXNCb3Q6IGJvb2xlYW47XHJcbn1cclxuZXhwb3J0IGludGVyZmFjZSBSb3RhdGlvbiB7XHJcbiAgWDogbnVtYmVyO1xyXG4gIFk6IG51bWJlcjtcclxuICBaOiBudW1iZXI7XHJcbiAgVzogbnVtYmVyO1xyXG59XHJcbmV4cG9ydCBpbnRlcmZhY2UgTG9jYXRpb25PclNjYWxlT3JEZWF0aExvY2F0aW9uIHtcclxuICBYOiBudW1iZXI7XHJcbiAgWTogbnVtYmVyO1xyXG4gIFo6IG51bWJlcjtcclxuICBTY2FsZUZhY3RvcjogbnVtYmVyO1xyXG4gIEJpdHM6IG51bWJlcjtcclxufVxyXG5leHBvcnQgaW50ZXJmYWNlIEluZm8xIHtcclxuICBJZDogc3RyaW5nO1xyXG4gIEdyb3VwOiBzdHJpbmc7XHJcbiAgTWV0YWRhdGE6IHN0cmluZztcclxuICBTdGFydFRpbWU6IG51bWJlcjtcclxuICBFbmRUaW1lOiBudW1iZXI7XHJcbiAgU2l6ZUluQnl0ZXM6IG51bWJlcjtcclxufVxyXG5leHBvcnQgaW50ZXJmYWNlIFN0YXRzIHtcclxuICBVbmtub3duOiBudW1iZXI7XHJcbiAgRWxpbWluYXRpb25zOiBudW1iZXI7XHJcbiAgQWNjdXJhY3k6IG51bWJlcjtcclxuICBBc3Npc3RzOiBudW1iZXI7XHJcbiAgV2VhcG9uRGFtYWdlOiBudW1iZXI7XHJcbiAgT3RoZXJEYW1hZ2U6IG51bWJlcjtcclxuICBEYW1hZ2VUb1BsYXllcnM6IG51bWJlcjtcclxuICBSZXZpdmVzOiBudW1iZXI7XHJcbiAgRGFtYWdlVGFrZW46IG51bWJlcjtcclxuICBEYW1hZ2VUb1N0cnVjdHVyZXM6IG51bWJlcjtcclxuICBNYXRlcmlhbHNHYXRoZXJlZDogbnVtYmVyO1xyXG4gIE1hdGVyaWFsc1VzZWQ6IG51bWJlcjtcclxuICBUb3RhbFRyYXZlbGVkOiBudW1iZXI7XHJcbiAgSW5mbzogSW5mbzE7XHJcbn1cclxuZXhwb3J0IGludGVyZmFjZSBUZWFtU3RhdHMge1xyXG4gIFVua25vd246IG51bWJlcjtcclxuICBQb3NpdGlvbjogbnVtYmVyO1xyXG4gIFRvdGFsUGxheWVyczogbnVtYmVyO1xyXG4gIEluZm86IEluZm8xO1xyXG59XHJcbmV4cG9ydCBpbnRlcmZhY2UgR2FtZURhdGEge1xyXG4gIEdhbWVTZXNzaW9uSWQ/OiBzdHJpbmc7XHJcbiAgVXRjVGltZVN0YXJ0ZWRNYXRjaDogc3RyaW5nO1xyXG4gIE1hdGNoRW5kVGltZT86IG51bGw7XHJcbiAgTWFwSW5mbz86IG51bGw7XHJcbiAgQ3VycmVudFBsYXlsaXN0OiBzdHJpbmc7XHJcbiAgQWRkaXRpb25hbFBsYXlsaXN0TGV2ZWxzPzogbnVsbDtcclxuICBBY3RpdmVHYW1lcGxheU1vZGlmaWVycz86IChzdHJpbmcpW10gfCBudWxsO1xyXG4gIFJlY29yZGVySWQ6IG51bWJlcjtcclxuICBNYXhQbGF5ZXJzOiBudW1iZXI7XHJcbiAgVG90YWxUZWFtcz86IG51bGw7XHJcbiAgVG90YWxCb3RzPzogbnVsbDtcclxuICBUZWFtU2l6ZTogbnVtYmVyO1xyXG4gIFRvdGFsUGxheWVyU3RydWN0dXJlczogbnVtYmVyO1xyXG4gIElzVG91cm5hbWVudFJvdW5kOiBib29sZWFuO1xyXG4gIFRvdXJuYW1lbnRSb3VuZD86IG51bGw7XHJcbiAgSXNMYXJnZVRlYW1HYW1lPzogbnVsbDtcclxuICBBaXJjcmFmdFN0YXJ0VGltZT86IG51bGw7XHJcbiAgU2FmZVpvbmVzU3RhcnRUaW1lPzogbnVsbDtcclxuICBXaW5uaW5nVGVhbT86IG51bGw7XHJcbiAgV2lubmluZ1BsYXllcklkcz86IG51bGw7XHJcbn1cclxuZXhwb3J0IGludGVyZmFjZSBUZWFtRGF0YUVudGl0eSB7XHJcbiAgVGVhbUluZGV4OiBudW1iZXI7XHJcbiAgUGxheWVySWRzPzogKG51bWJlcilbXSB8IG51bGw7XHJcbiAgUGxheWVyTmFtZXM/OiAoc3RyaW5nKVtdIHwgbnVsbDtcclxuICBQYXJ0eU93bmVySWQ/OiBudW1iZXIgfCBudWxsO1xyXG4gIFBsYWNlbWVudD86IG51bWJlciB8IG51bGw7XHJcbiAgVGVhbUtpbGxzPzogbnVtYmVyIHwgbnVsbDtcclxufVxyXG5leHBvcnQgaW50ZXJmYWNlIFBsYXllckRhdGFFbnRpdHkge1xyXG4gIElkOiBudW1iZXI7XHJcbiAgUGxheWVySWQ/OiBzdHJpbmcgfCBudWxsO1xyXG4gIEVwaWNJZD86IHN0cmluZyB8IG51bGw7XHJcbiAgUGxhdGZvcm1VbmlxdWVOZXRJZD86IHN0cmluZyB8IG51bGw7XHJcbiAgQm90SWQ/OiBzdHJpbmcgfCBudWxsO1xyXG4gIElzQm90OiBib29sZWFuO1xyXG4gIFBsYXllck5hbWU6IHN0cmluZztcclxuICBQbGF5ZXJOYW1lQ3VzdG9tT3ZlcnJpZGU/OiBzdHJpbmcgfCBudWxsO1xyXG4gIFN0cmVhbWVyTW9kZU5hbWU/OiBudWxsO1xyXG4gIFBsYXRmb3JtPzogc3RyaW5nIHwgbnVsbDtcclxuICBMZXZlbD86IG51bWJlciB8IG51bGw7XHJcbiAgU2Vhc29uTGV2ZWxVSURpc3BsYXk/OiBudW1iZXIgfCBudWxsO1xyXG4gIEludmVudG9yeUlkPzogbnVsbDtcclxuICBQbGF5ZXJOdW1iZXI/OiBudW1iZXIgfCBudWxsO1xyXG4gIFRlYW1JbmRleDogbnVtYmVyO1xyXG4gIElzUGFydHlMZWFkZXI6IGJvb2xlYW47XHJcbiAgSXNSZXBsYXlPd25lcjogYm9vbGVhbjtcclxuICBJc0dhbWVTZXNzaW9uT3duZXI/OiBudWxsO1xyXG4gIEhhc0ZpbmlzaGVkTG9hZGluZz86IGJvb2xlYW4gfCBudWxsO1xyXG4gIEhhc1N0YXJ0ZWRQbGF5aW5nPzogYm9vbGVhbiB8IG51bGw7XHJcbiAgSGFzVGhhbmtlZEJ1c0RyaXZlcj86IGJvb2xlYW4gfCBudWxsO1xyXG4gIElzVXNpbmdTdHJlYW1lck1vZGU/OiBudWxsO1xyXG4gIElzVXNpbmdBbm9ueW1vdXNNb2RlPzogYm9vbGVhbiB8IG51bGw7XHJcbiAgRGlzY29ubmVjdGVkPzogYm9vbGVhbiB8IG51bGw7XHJcbiAgUmVib290Q291bnRlcj86IG51bGw7XHJcbiAgUGxhY2VtZW50PzogbnVtYmVyIHwgbnVsbDtcclxuICBLaWxscz86IG51bWJlciB8IG51bGw7XHJcbiAgVGVhbUtpbGxzPzogbnVtYmVyIHwgbnVsbDtcclxuICBEZWF0aENhdXNlPzogbnVtYmVyIHwgbnVsbDtcclxuICBEZWF0aENpcmN1bXN0YW5jZT86IG51bGw7XHJcbiAgRGVhdGhUYWdzPzogKHN0cmluZylbXSB8IG51bGw7XHJcbiAgRGVhdGhMb2NhdGlvbj86IExvY2F0aW9uT3JTY2FsZU9yRGVhdGhMb2NhdGlvbjEgfCBudWxsO1xyXG4gIERlYXRoVGltZT86IG51bWJlciB8IG51bGw7XHJcbiAgRGVhdGhUaW1lRG91YmxlPzogbnVtYmVyIHwgbnVsbDtcclxuICBDb3NtZXRpY3M6IENvc21ldGljcztcclxuICBDdXJyZW50V2VhcG9uPzogbnVtYmVyIHwgbnVsbDtcclxuICBMb2NhdGlvbnM/OiAobnVsbClbXSB8IG51bGw7XHJcbn1cclxuZXhwb3J0IGludGVyZmFjZSBMb2NhdGlvbk9yU2NhbGVPckRlYXRoTG9jYXRpb24xIHtcclxuICBYOiBudW1iZXI7XHJcbiAgWTogbnVtYmVyO1xyXG4gIFo6IG51bWJlcjtcclxuICBTY2FsZUZhY3RvcjogbnVtYmVyO1xyXG4gIEJpdHM6IG51bWJlcjtcclxufVxyXG5leHBvcnQgaW50ZXJmYWNlIENvc21ldGljcyB7XHJcbiAgQ2hhcmFjdGVyR2VuZGVyPzogbnVtYmVyIHwgbnVsbDtcclxuICBDaGFyYWN0ZXJCb2R5VHlwZT86IG51bWJlciB8IG51bGw7XHJcbiAgUGFydHM6IHN0cmluZztcclxuICBWYXJpYW50UmVxdWlyZWRDaGFyYWN0ZXJQYXJ0cz86IChzdHJpbmcpW10gfCBudWxsO1xyXG4gIEhlcm9UeXBlPzogc3RyaW5nIHwgbnVsbDtcclxuICBCYW5uZXJJY29uSWQ/OiBzdHJpbmcgfCBudWxsO1xyXG4gIEJhbm5lckNvbG9ySWQ/OiBzdHJpbmcgfCBudWxsO1xyXG4gIEl0ZW1XcmFwcz86IChzdHJpbmcgfCBudWxsKVtdIHwgbnVsbDtcclxuICBTa3lEaXZlQ29udHJhaWw/OiBzdHJpbmcgfCBudWxsO1xyXG4gIEdsaWRlcj86IHN0cmluZyB8IG51bGw7XHJcbiAgUGlja2F4ZT86IHN0cmluZyB8IG51bGw7XHJcbiAgSXNEZWZhdWx0Q2hhcmFjdGVyPzogbnVsbDtcclxuICBDaGFyYWN0ZXI/OiBzdHJpbmcgfCBudWxsO1xyXG4gIEJhY2twYWNrPzogc3RyaW5nIHwgbnVsbDtcclxuICBMb2FkaW5nU2NyZWVuPzogc3RyaW5nIHwgbnVsbDtcclxuICBEYW5jZXM/OiAoc3RyaW5nKVtdIHwgbnVsbDtcclxuICBNdXNpY1BhY2s/OiBzdHJpbmcgfCBudWxsO1xyXG4gIFBldFNraW4/OiBudWxsO1xyXG59XHJcbmV4cG9ydCBpbnRlcmZhY2UgS2lsbEZlZWRFbnRpdHkge1xyXG4gIFBsYXllcklkOiBudW1iZXI7XHJcbiAgUGxheWVyTmFtZTogc3RyaW5nO1xyXG4gIFBsYXllcklzQm90OiBib29sZWFuO1xyXG4gIEZpbmlzaGVyT3JEb3duZXI/OiBudW1iZXIgfCBudWxsO1xyXG4gIEZpbmlzaGVyT3JEb3duZXJOYW1lPzogc3RyaW5nIHwgbnVsbDtcclxuICBGaW5pc2hlck9yRG93bmVySXNCb3Q6IGJvb2xlYW47XHJcbiAgUmVwbGljYXRlZFdvcmxkVGltZVNlY29uZHM6IG51bWJlcjtcclxuICBSZXBsaWNhdGVkV29ybGRUaW1lU2Vjb25kc0RvdWJsZTogbnVtYmVyO1xyXG4gIERpc3RhbmNlPzogbnVtYmVyIHwgbnVsbDtcclxuICBEZWF0aENhdXNlPzogbnVtYmVyIHwgbnVsbDtcclxuICBEZWF0aExvY2F0aW9uOiBMb2NhdGlvbk9yU2NhbGVPckRlYXRoTG9jYXRpb247XHJcbiAgRGVhdGhDaXJjdW1zdGFuY2U/OiBudWxsO1xyXG4gIERlYXRoVGFncz86IChzdHJpbmcpW10gfCBudWxsO1xyXG4gIElzRG93bmVkOiBib29sZWFuO1xyXG4gIElzUmV2aXZlZDogYm9vbGVhbjtcclxufVxyXG5leHBvcnQgaW50ZXJmYWNlIE1hcERhdGEge1xyXG4gIEJhdHRsZUJ1c0ZsaWdodFBhdGhzPzogbnVsbDtcclxuICBTYWZlWm9uZXM/OiAobnVsbClbXSB8IG51bGw7XHJcbiAgTGxhbWFzPzogKG51bGwpW10gfCBudWxsO1xyXG4gIFN1cHBseURyb3BzPzogKG51bGwpW10gfCBudWxsO1xyXG4gIFJlYm9vdFZhbnM/OiAobnVsbClbXSB8IG51bGw7XHJcbiAgV29ybGRHcmlkU3RhcnQ/OiBudWxsO1xyXG4gIFdvcmxkR3JpZEVuZD86IG51bGw7XHJcbiAgV29ybGRHcmlkU3BhY2luZz86IG51bGw7XHJcbiAgR3JpZENvdW50WD86IG51bGw7XHJcbiAgR3JpZENvdW50WT86IG51bGw7XHJcbiAgV29ybGRHcmlkVG90YWxTaXplPzogbnVsbDtcclxufVxyXG5leHBvcnQgaW50ZXJmYWNlIEluZm8ge1xyXG4gIExlbmd0aEluTXM6IG51bWJlcjtcclxuICBOZXR3b3JrVmVyc2lvbjogbnVtYmVyO1xyXG4gIENoYW5nZWxpc3Q6IG51bWJlcjtcclxuICBGcmllbmRseU5hbWU6IHN0cmluZztcclxuICBUaW1lc3RhbXA6IHN0cmluZztcclxuICBUb3RhbERhdGFTaXplSW5CeXRlczogbnVtYmVyO1xyXG4gIElzTGl2ZTogYm9vbGVhbjtcclxuICBJc0NvbXByZXNzZWQ6IGJvb2xlYW47XHJcbiAgSXNFbmNyeXB0ZWQ6IGJvb2xlYW47XHJcbiAgRW5jcnlwdGlvbktleTogRW5jcnlwdGlvbktleTtcclxuICBGaWxlVmVyc2lvbjogbnVtYmVyO1xyXG59XHJcbmV4cG9ydCBpbnRlcmZhY2UgRW5jcnlwdGlvbktleSB7XHJcbiAgTGVuZ3RoOiBudW1iZXI7XHJcbiAgSXNFbXB0eTogYm9vbGVhbjtcclxufVxyXG5leHBvcnQgaW50ZXJmYWNlIEhlYWRlciB7XHJcbiAgTmV0d29ya1ZlcnNpb246IG51bWJlcjtcclxuICBOZXR3b3JrQ2hlY2tzdW06IG51bWJlcjtcclxuICBFbmdpbmVOZXR3b3JrVmVyc2lvbjogbnVtYmVyO1xyXG4gIEdhbWVOZXR3b3JrUHJvdG9jb2xWZXJzaW9uOiBudW1iZXI7XHJcbiAgR3VpZDogc3RyaW5nO1xyXG4gIE1ham9yOiBudW1iZXI7XHJcbiAgTWlub3I6IG51bWJlcjtcclxuICBQYXRjaDogbnVtYmVyO1xyXG4gIENoYW5nZWxpc3Q6IG51bWJlcjtcclxuICBCcmFuY2g6IHN0cmluZztcclxuICBVRTRWZXJzaW9uOiBudW1iZXI7XHJcbiAgVUU1VmVyc2lvbjogbnVtYmVyO1xyXG4gIFBhY2thZ2VWZXJzaW9uTGljZW5zZWVVRTogbnVtYmVyO1xyXG4gIExldmVsTmFtZXNBbmRUaW1lcz86IChMZXZlbE5hbWVzQW5kVGltZXNFbnRpdHkpW10gfCBudWxsO1xyXG4gIEZsYWdzOiBudW1iZXI7XHJcbiAgR2FtZVNwZWNpZmljRGF0YT86IChzdHJpbmcpW10gfCBudWxsO1xyXG4gIFBsYXRmb3JtOiBzdHJpbmc7XHJcbiAgQnVpbGRUYXJnZXRUeXBlOiBudW1iZXI7XHJcbn1cclxuZXhwb3J0IGludGVyZmFjZSBMZXZlbE5hbWVzQW5kVGltZXNFbnRpdHkge1xyXG4gIEl0ZW0xOiBzdHJpbmc7XHJcbiAgSXRlbTI6IG51bWJlcjtcclxufSIsImltcG9ydCB7IGRiIH0gZnJvbSAnLi4vLi4vcHJlbG9hZC9zcmMvZGF0YWJhc2UnO1xuaW1wb3J0IHsgY3JlYXRlV3JpdGVTdHJlYW0sIGV4aXN0c1N5bmMsIHVubGluaywgbWtkaXJTeW5jIH0gZnJvbSAnZnMnO1xuaW1wb3J0IHsgR2FtZUVsaW1pbmF0aW9uIH0gZnJvbSAnLi4vLi4vcHJlbG9hZC9zcmMvbW9kZWxzL0dhbWVFbGltaW5hdGlvbic7XG5pbXBvcnQgeyBHYW1lUGxheWVyIH0gZnJvbSAnLi4vLi4vcHJlbG9hZC9zcmMvbW9kZWxzL0dhbWVQbGF5ZXInO1xuaW1wb3J0IHsgR2FtZVN0YXQgfSBmcm9tICcuLi8uLi9wcmVsb2FkL3NyYy9tb2RlbHMvR2FtZVN0YXRzJztcbmltcG9ydCB7IFBsYXllciB9IGZyb20gJy4uLy4uL3ByZWxvYWQvc3JjL21vZGVscy9QbGF5ZXInO1xuaW1wb3J0ICogYXMgbmV0IGZyb20gJ25ldCc7XG5pbXBvcnQgeyBSZXBsYXlEYXRhLCBQbGF5ZXJEYXRhRW50aXR5LCBHdW5UeXBlIH0gZnJvbSAnLi9kYXRhdHlwZXMnO1xuY29uc3Qgbm9kZUZldGNoID0gcmVxdWlyZSgnbm9kZS1mZXRjaCcpO1xuY29uc3QgY2xpZW50ID0gcmVxdWlyZSgnaHR0cHMnKTtcbmNvbnN0IHNoYXJwID0gcmVxdWlyZSgnc2hhcnAnKTtcbmNvbnN0IGNyeXB0byA9IHJlcXVpcmUoJ2NyeXB0bycpO1xuLy9pbXBvcnQgRm9ydFBsYXllclN0YXRlIGZyb20gJy4vRm9ydFBsYXllclN0YXRlLmpzb24nO1xuLy9jb25zdCBwYXJzZVJlcGxheSA9IHJlcXVpcmUoJ2ZvcnRuaXRlLXJlcGxheS1wYXJzZXInKTtcblxubGV0IHJlcGxheTpSZXBsYXlEYXRhO1xuXG5hc3luYyBmdW5jdGlvbiByZXBsYXlJUEMocGF0aDpzdHJpbmcsIHJlcGxheU5hbWU6c3RyaW5nKTogUHJvbWlzZTxSZXBsYXlEYXRhPiB7XG4gIGNvbnN0IFBJUEVfTkFNRSA9IGBcXFxcXFxcXC5cXFxccGlwZVxcXFwke3JlcGxheU5hbWV9YDtcbiAgdHJ5IHtcbiAgICBpZiAocmVxdWlyZSgnZnMnKS5leGlzdHNTeW5jKFBJUEVfTkFNRSkpIHtcbiAgICAgIHJlcXVpcmUoJ2ZzJykudW5saW5rU3luYyhQSVBFX05BTUUpO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICB9XG5cbiAgdmFyIGNwID0gcmVxdWlyZShcImNoaWxkX3Byb2Nlc3NcIik7XG4gIGNwLmV4ZWMoXCJyZXBsYXlQYXJzZXJcXFxcRm9ydFJlcGxheVBhcnNlci5leGUgXCIgKyBwYXRoKTtcblxuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGNvbnN0IHNlcnZlciA9IG5ldC5jcmVhdGVTZXJ2ZXIoKHN0cmVhbSkgPT4ge1xuICAgICAgbGV0IGRhdGEgPSAnJztcblxuICAgICAgc3RyZWFtLm9uKCdkYXRhJywgKGNodW5rOiBCdWZmZXIpID0+IHtcbiAgICAgICAgZGF0YSArPSBjaHVuay50b1N0cmluZygpO1xuICAgICAgfSk7XG5cbiAgICAgIHN0cmVhbS5vbignZW5kJywgKCkgPT4ge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGRhdGEudHJpbSgpO1xuICAgICAgICBzZXJ2ZXIuY2xvc2UoKTtcbiAgICAgICAgaWYgKHZhbHVlID09PSBcIlJlcGxheSBpbiBwcm9ncmVzcy5cIikge1xuICAgICAgICAgIHJlamVjdCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJlc29sdmUoSlNPTi5wYXJzZSh2YWx1ZSkgYXMgUmVwbGF5RGF0YSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNhdGNoIHtcbiAgICAgICAgICAgIHJlamVjdChcIkZhaWxlZCB0byBwYXJzZSBKU09OIGRhdGEuXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHN0cmVhbS5vbignZXJyb3InLCAoZXJyb3IpID0+IHtcbiAgICAgICAgY29uc29sZS5lcnJvcignU3RyZWFtIGVycm9yOicsIGVycm9yKTtcbiAgICAgICAgc2VydmVyLmNsb3NlKCk7XG4gICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHNlcnZlci5vbignZXJyb3InLCAoZXJyb3IpID0+IHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1NlcnZlciBlcnJvcjonLCBlcnJvcik7XG4gICAgICBzZXJ2ZXIuY2xvc2UoKTtcbiAgICAgIHJlamVjdChlcnJvcik7XG4gICAgfSk7XG5cbiAgICBzZXJ2ZXIubGlzdGVuKFBJUEVfTkFNRSk7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBzZXJ2ZXIuY2xvc2UoKTtcbiAgICAgIHJlamVjdChcIkZhaWxlZCB0byBwYXJzZSByZXBsYXkgaW4gdGltZS5cIik7XG4gICAgfSwgNzAwMCk7XG4gIH0pO1xufVxuXG5hc3luYyBmdW5jdGlvbiBwYXJzZVBsYXllcnMocGxheWVyczpQbGF5ZXJEYXRhRW50aXR5W10pIHtcbiAgY29uc3QgcmVzdWx0OiBQbGF5ZXJbXSA9IFtdO1xuICBjb25zdCBleGlzdGluZ1BsYXllcnMgPSBhd2FpdCBkYi5nZXRQbGF5ZXJzKCk7XG4gIHBsYXllcnMuZm9yRWFjaCgocCkgPT4ge1xuICAgIGxldCBkdXBsaWNhdGVSZXBsYXlFbnRpdGllcyA9IHJlc3VsdC5maWx0ZXIociA9PiBbcC5Cb3RJZCwgcC5FcGljSWQsIHAuUGxheWVySWRdLmluY2x1ZGVzKHIucGxheWVySUQudG9VcHBlckNhc2UoKSkpO1xuICAgIGlmIChkdXBsaWNhdGVSZXBsYXlFbnRpdGllcy5sZW5ndGggPT0gMCkge1xuICAgICAgY29uc3QgcGxheWVySWQgPSAocC5Cb3RJZCA/PyBwLkVwaWNJZCA/PyBwLlBsYXllcklkID8/ICdCYWRQbGF5ZXJJZCcpLnRvTG93ZXJDYXNlKCk7XG4gICAgICBjb25zdCBwcmVFeGlzdGluZyA9IGV4aXN0aW5nUGxheWVycy5maW5kKGVwID0+IGVwLnBsYXllcklEID09IHBsYXllcklkKTtcbiAgICAgIHJlc3VsdC5wdXNoKG5ldyBQbGF5ZXIoe1xuICAgICAgICBwbGF5ZXJJRDogcGxheWVySWQsXG4gICAgICAgIHVzZXJuYW1lOiBwLlBsYXllck5hbWUgIT0gbnVsbCA/XG4gICAgICAgICAgcC5QbGF5ZXJOYW1lIDogXG4gICAgICAgICAgcHJlRXhpc3Rpbmc/LnVzZXJuYW1lID8/ICcnLFxuICAgICAgICBpc0JvdDogcC5Jc0JvdCxcbiAgICAgICAgcGxhdGZvcm06IHAuUGxhdGZvcm0gIT0gbnVsbCA/IHAuUGxhdGZvcm0gOiBwcmVFeGlzdGluZz8ucGxhdGZvcm0gPz8gJ05VTEwnLFxuICAgICAgICBza2luOiBwLkNvc21ldGljcy5DaGFyYWN0ZXIgIT0gbnVsbCA/IHAuQ29zbWV0aWNzLkNoYXJhY3RlciA6IHByZUV4aXN0aW5nPy5za2luID8/ICcnLFxuICAgICAgICBzbmlwZXM6IDEsXG4gICAgICB9KSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gcGFyc2VFbGltaW5hdGlvbnMoZ2FtZUlEOiBzdHJpbmcpIHtcbiAgY29uc3QgZWxpbXMgPSByZXBsYXkuRWxpbWluYXRpb25zO1xuICBjb25zdCByZXN1bHQ6IEdhbWVFbGltaW5hdGlvbltdID0gW107XG4gIGlmIChlbGltcyAhPSBudWxsICYmIGVsaW1zLmxlbmd0aCA+IDApIHtcbiAgICBlbGltcy5mb3JFYWNoKChlKSA9PiB7XG4gICAgICBjb25zdCB0aW1lTSA9IHBhcnNlSW50KGUuVGltZS5zcGxpdCgnOicpWzBdKTtcbiAgICAgIGNvbnN0IHRpbWVTID0gcGFyc2VJbnQoZS5UaW1lLnNwbGl0KCc6JylbMV0pO1xuICAgICAgcmVzdWx0LnB1c2gobmV3IEdhbWVFbGltaW5hdGlvbih7XG4gICAgICAgIGlkOiAwLFxuICAgICAgICBnYW1lSUQ6IGdhbWVJRCxcbiAgICAgICAgdGltZTogMTAwMCAqICh0aW1lTSAqIDYwICsgdGltZVMpLFxuICAgICAgICBraWxsZXJJRDogZS5FbGltaW5hdG9yLFxuICAgICAgICBraWxsZWRJRDogZS5FbGltaW5hdGVkLFxuICAgICAgICBrbm9ja2VkOiBlLktub2NrZWQsXG4gICAgICAgIHdlYXBvbjogR3VuVHlwZVtlLkd1blR5cGVdID8/IDUwLFxuICAgICAgfSkpO1xuICAgIH0pO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIHBhcnNlU3RhdHMobm9uTnBjUGxheWVyczogUGxheWVyRGF0YUVudGl0eVtdLCBnYW1lSUQ6IHN0cmluZywgcmVwbGF5TmFtZTogc3RyaW5nLCBtb2RlOiBzdHJpbmcpIHtcbiAgY29uc3QgaW5DcmVhdGl2ZSA9IG1vZGUudG9Mb3dlckNhc2UoKS5pbmNsdWRlcygnY3JlYXRpdmUnKTtcbiAgY29uc3QgYm90Q291bnQgPSBpbkNyZWF0aXZlID8gMCA6IG5vbk5wY1BsYXllcnMuZmlsdGVyKHAgPT4gcC5UZWFtSW5kZXggPiAyICYmIHAuSXNCb3QpLmxlbmd0aDtcbiAgY29uc3QgcGxheWVyQ291bnQgPSBub25OcGNQbGF5ZXJzLmZpbHRlcihwID0+IHAuVGVhbUluZGV4ID4gMiAmJiAhcC5Jc0JvdCkubGVuZ3RoO1xuICBjb25zdCBvd25lclBsYXllciA9IGluQ3JlYXRpdmUgPyBudWxsIDogbm9uTnBjUGxheWVycy5maW5kKHAgPT4gcC5Jc1JlcGxheU93bmVyKSE7XG4gIGNvbnN0IG93bmVySUQgPSBvd25lclBsYXllciAhPSBudWxsID8gb3duZXJQbGF5ZXIuRXBpY0lkID8/IG93bmVyUGxheWVyLlBsYXllcklkID8/ICdCYWRQbGF5ZXJJZCcgOiAnbnVsbCc7XG4gIGNvbnN0IGdhbWVEdXJhdGlvbiA9IHJlcGxheS5JbmZvLkxlbmd0aEluTXM7XG4gIHJldHVybiBuZXcgR2FtZVN0YXQoe1xuICAgIGdhbWVJRDogZ2FtZUlELFxuICAgIG93bmVyOiBvd25lcklELFxuICAgIHRpbWVzdGFtcDogbmV3IERhdGUocmVwbGF5LkluZm8uVGltZXN0YW1wKSxcbiAgICByZXBsYXlOYW1lOiByZXBsYXlOYW1lLFxuICAgIG1vZGU6IG1vZGUsXG4gICAgYm90czogYm90Q291bnQsXG4gICAgcGxheWVyczogcGxheWVyQ291bnQsXG4gICAgZHVyYXRpb246IGdhbWVEdXJhdGlvbixcbiAgICBwbGFjZW1lbnQ6IGluQ3JlYXRpdmUgPyAwIDogcmVwbGF5LlRlYW1TdGF0cyA/IHJlcGxheS5UZWFtU3RhdHMuUG9zaXRpb24gOiAwLFxuICAgIGtpbGxzOiBpbkNyZWF0aXZlID8gMCA6IHJlcGxheS5TdGF0cyA/IHJlcGxheS5TdGF0cy5FbGltaW5hdGlvbnMgOiAwLFxuICAgIGFzc2lzdHM6IGluQ3JlYXRpdmUgPyAwIDogcmVwbGF5LlN0YXRzID8gcmVwbGF5LlN0YXRzLkFzc2lzdHMgOiAwLFxuICAgIGFjY3VyYWN5OiBpbkNyZWF0aXZlID8gMCA6IHJlcGxheS5TdGF0cyA/IHJlcGxheS5TdGF0cy5BY2N1cmFjeSA6IDAsXG4gICAgZGFtYWdlRGVhbHQ6IGluQ3JlYXRpdmUgPyAwIDogcmVwbGF5LlN0YXRzID8gcmVwbGF5LlN0YXRzLkRhbWFnZVRvUGxheWVycyA6IDAsXG4gICAgZGFtYWdlVGFrZW46IGluQ3JlYXRpdmUgPyAwIDogcmVwbGF5LlN0YXRzID8gcmVwbGF5LlN0YXRzLkRhbWFnZVRha2VuIDogMCxcbiAgICBkaXN0YW5jZVRyYXZlbGxlZDogaW5DcmVhdGl2ZSA/IDAgOiByZXBsYXkuU3RhdHMgPyByZXBsYXkuU3RhdHMuVG90YWxUcmF2ZWxlZCA6IDAsXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBwYXJzZUdhbWVycyhub25OcGNQbGF5ZXJzOlBsYXllckRhdGFFbnRpdHlbXSwgcGxheWVyczogUGxheWVyW10sIGdhbWVJRDogc3RyaW5nLCBtb2RlOiBzdHJpbmcpIHtcbiAgY29uc3QgZ2FtZXJzOiBHYW1lUGxheWVyW10gPSBbXTtcbiAgY29uc3QgaW5DcmVhdGl2ZSA9IG1vZGUudG9Mb3dlckNhc2UoKS5pbmNsdWRlcygnY3JlYXRpdmUnKTtcbiAgcGxheWVycy5mb3JFYWNoKChwKSA9PiB7XG4gICAgY29uc3QgZGF0YVBsYXllciA9IG5vbk5wY1BsYXllcnMuZmluZChkcCA9PiBbZHAuQm90SWQ/LnRvTG93ZXJDYXNlKCksIGRwLkVwaWNJZD8udG9Mb3dlckNhc2UoKSwgZHAuUGxheWVySWQ/LnRvTG93ZXJDYXNlKCldLmluY2x1ZGVzKHAucGxheWVySUQpKSE7XG4gICAgbGV0IHRlYW0gPSByZXBsYXkuVGVhbURhdGE/LmZpbmQodCA9PiB0LlRlYW1JbmRleCA9PSBkYXRhUGxheWVyLlRlYW1JbmRleCkhO1xuICAgIGxldCB0ZWFtUGxhY2VtZW50ID0gaW5DcmVhdGl2ZSA/IDAgOiB0ZWFtLlBsYWNlbWVudCA/PyAwO1xuICAgIGdhbWVycy5wdXNoKG5ldyBHYW1lUGxheWVyKHtcbiAgICAgIGlkOiAwLFxuICAgICAgcGxheWVySUQ6IHAucGxheWVySUQsXG4gICAgICBnYW1lSUQ6IGdhbWVJRCxcbiAgICAgIGlzQm90OiBwLmlzQm90LFxuICAgICAgdGVhbTogZGF0YVBsYXllci5UZWFtSW5kZXggIT0gbnVsbCA/IGRhdGFQbGF5ZXIuVGVhbUluZGV4IC0gMiA6IC0xLFxuICAgICAga2lsbHM6IGRhdGFQbGF5ZXIuS2lsbHMgPz8gMCxcbiAgICAgIHBsYWNlbWVudDogdGVhbVBsYWNlbWVudCxcbiAgICB9KSk7XG4gIH0pO1xuICByZXR1cm4gZ2FtZXJzO1xufVxuXG5hc3luYyBmdW5jdGlvbiBkb3dubG9hZFNraW5zKHBsYXllcnM6IFBsYXllcltdKSB7XG4gIGZ1bmN0aW9uIGRvd25sb2FkSW1hZ2UodXJsOiBzdHJpbmcsIGZpbGVwYXRoOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgY2xpZW50LmdldCh1cmwsIChyZXM6IGFueSkgPT4ge1xuICAgICAgICBpZiAocmVzLnN0YXR1c0NvZGUgPT09IDIwMCkge1xuICAgICAgICAgIHJlcy5waXBlKGNyZWF0ZVdyaXRlU3RyZWFtKGZpbGVwYXRoKSlcbiAgICAgICAgICAgIC5vbignZXJyb3InLCByZWplY3QpXG4gICAgICAgICAgICAub25jZSgnY2xvc2UnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgIGF3YWl0IHNoYXJwKGZpbGVwYXRoKS5yZXNpemUoNjQpLnRvRmlsZShmaWxlcGF0aC5yZXBsYWNlKCdfcmF3RmlsZScsICcnKSk7XG4gICAgICAgICAgICAgIHVubGluayhmaWxlcGF0aCwgKGVycikgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChlcnIpIHsgcmVqZWN0KGZhbHNlKTsgfVxuICAgICAgICAgICAgICAgIHJlc29sdmUodHJ1ZSk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzLnJlc3VtZSgpO1xuICAgICAgICAgIHJlamVjdChmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgY29uc3Qgc2tpbnMgPSBwbGF5ZXJzLmZpbHRlcihwID0+IHAuc2tpbiAhPSAnbnVsbCcgJiYgcC5za2luICE9ICcnKS5tYXAocCA9PiBwLnNraW4pO1xuICBsZXQgc2tpbkZvbGRlcjogc3RyaW5nO1xuICBpZiAoaW1wb3J0Lm1ldGEuZW52LkRFVikge1xuICAgIHNraW5Gb2xkZXIgPSBgJHtfX2Rpcm5hbWUuc3BsaXQoJ1xcXFwnKS5zbGljZSgwLCAtMikuam9pbignLycpfS9yZW5kZXJlci9hc3NldHMvc2tpbnMvYDtcbiAgfVxuICBlbHNlIHtcbiAgICBza2luRm9sZGVyID0gYCR7X19kaXJuYW1lLnNwbGl0KCdcXFxcJykuc2xpY2UoMCwgLTIpLmpvaW4oJy8nKX0vYXNzZXRzL3NraW5zL2A7XG4gIH1cbiAgaWYgKCFleGlzdHNTeW5jKHNraW5Gb2xkZXIpKSB7XG4gICAgbWtkaXJTeW5jKHNraW5Gb2xkZXIsIHsgcmVjdXJzaXZlOiB0cnVlIH0pO1xuICB9XG4gIGZvciAobGV0IHggPSAwOyB4IDwgc2tpbnMubGVuZ3RoOyB4KyspIHtcbiAgICBjb25zdCBza2luUGF0aCA9IHNraW5Gb2xkZXIgKyBza2luc1t4XSArICcucG5nJztcbiAgICBjb25zdCBleGlzdHMgPSBleGlzdHNTeW5jKGAke3NraW5QYXRofWApO1xuICAgIGlmICghZXhpc3RzKSB7XG4gICAgICBjb25zdCB1cmwgPSBgaHR0cHM6Ly9mb3J0bml0ZS1hcGkuY29tL3YyL2Nvc21ldGljcy9ici8ke3NraW5zW3hdfWA7XG4gICAgICBjb25zdCByZXMgPSBhd2FpdCBub2RlRmV0Y2godXJsKTtcbiAgICAgIGNvbnN0IGpib2R5ID0gYXdhaXQgcmVzLmpzb24oKTtcbiAgICAgIGlmIChqYm9keS5kYXRhICE9IG51bGwgJiYgYXdhaXQgZG93bmxvYWRJbWFnZShqYm9keS5kYXRhLmltYWdlcy5zbWFsbEljb24sIGAke3NraW5Gb2xkZXIgKyBza2luc1t4XSArICdfcmF3RmlsZS5wbmcnfWApID09IGZhbHNlKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdGYWlsZWQgdG8gZG93bmxvYWQgc2tpbi4nKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGFkZFJlcGxheShwYXRoOiBzdHJpbmcpIHtcbiAgZnVuY3Rpb24gY3JlYXRlR2FtZVNlc3Npb25JRCgpOnN0cmluZyB7XG4gICAgcmV0dXJuIGNyeXB0by5jcmVhdGVIYXNoKCdtZDUnKS51cGRhdGUobmV3IERhdGUocmVwbGF5LkluZm8uVGltZXN0YW1wKS5nZXRUaW1lKCkudG9TdHJpbmcoKSkuZGlnZXN0KCdoZXgnKTtcbiAgfVxuICAvKlxuICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VSZXBsYXkocmVhZEZpbGVTeW5jKHBhdGgpLCB7XG4gICAgY3VzdG9tTmV0RmllbGRFeHBvcnRzOiBbRm9ydFBsYXllclN0YXRlXSxcbiAgICBwYXJzZUxldmVsOiAxLFxuICAgIGRlYnVnOiBmYWxzZSxcbiAgfSkuY2F0Y2goKF86RXJyb3IpID0+IHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSkgYXMgUmVwbGF5RGF0YTtcbiAgKi9cbiAgY29uc3QgcmVwbGF5TmFtZSA9IHBhdGguc3BsaXQoJ1xcXFwnKS5wb3AoKSA/PyAnSW52YWxpZCBSZXBsYXkgTmFtZSc7XG4gIGlmIChyZXBsYXlOYW1lID09PSBcIkludmFsaWQgUmVwbGF5IE5hbWVcIikgcmV0dXJuIGZhbHNlO1xuICB0cnkge1xuICAgIHJlcGxheSA9IGF3YWl0IHJlcGxheUlQQyhwYXRoLCByZXBsYXlOYW1lKTtcbiAgfVxuICBjYXRjaCB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChyZXBsYXkgPT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBjb25zdCBsYXN0R2FtZSA9IGF3YWl0IGRiLmdldExhc3RHYW1lKCk7XG4gIGNvbnN0IFNQTElUX1JFUExBWV9USU1FID0gMTc5NDAwMDtcbiAgaWYgKChsYXN0R2FtZSAhPSBudWxsICYmIGxhc3RHYW1lLmdhbWVJRC5pbmNsdWRlcygnLScpICYmIGxhc3RHYW1lLmR1cmF0aW9uID4gU1BMSVRfUkVQTEFZX1RJTUUpIHx8IHJlcGxheS5JbmZvLkxlbmd0aEluTXMgPiBTUExJVF9SRVBMQVlfVElNRSkge1xuICAgIGlmIChsYXN0R2FtZSAhPSBudWxsICYmIGxhc3RHYW1lLmdhbWVJRC5zcGxpdChcIi1cIikubGVuZ3RoID4gMSkge1xuICAgICAgY29uc3QgZ2FtZUlkeCA9IGxhc3RHYW1lLmdhbWVJRC5zcGxpdChcIi1cIik7XG4gICAgICBjb25zdCBuZXh0SWR4ID0gcGFyc2VJbnQoZ2FtZUlkeFsxXSkgKyAxO1xuICAgICAgcmVwbGF5LkdhbWVEYXRhLkdhbWVTZXNzaW9uSWQgPSBnYW1lSWR4WzBdICsgYC0ke25leHRJZHh9YDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICByZXBsYXkuR2FtZURhdGEuR2FtZVNlc3Npb25JZCA9IChyZXBsYXkuR2FtZURhdGEuR2FtZVNlc3Npb25JZCA/PyBjcmVhdGVHYW1lU2Vzc2lvbklEKCkpICsgXCItMFwiO1xuICAgIH1cbiAgfVxuICBsZXQgZ2FtZUlEID0gcmVwbGF5LkdhbWVEYXRhLkdhbWVTZXNzaW9uSWQgPz8gY3JlYXRlR2FtZVNlc3Npb25JRCgpO1xuICBpZiAoKGF3YWl0IGRiLmdldEdhbWVTdGF0cyhnYW1lSUQpKS5nYW1lSUQubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGNvbnN0IG1vZGU6IHN0cmluZyA9IHJlcGxheS5HYW1lRGF0YS5DdXJyZW50UGxheWxpc3QgPz8gJ0NSRUFUSVZFX1VOUkVBTCc7XG4gIGNvbnN0IG5vbk5wY1BsYXllcnMgPSByZXBsYXkuUGxheWVyRGF0YT8uZmlsdGVyKHAgPT4gcC5Cb3RJZCAhPSBudWxsIHx8IHAuRXBpY0lkICE9IG51bGwgfHwgcC5QbGF5ZXJJZCAhPSBudWxsKSA/PyBbXTtcbiAgY29uc3QgcGxheWVycyA9IGF3YWl0IHBhcnNlUGxheWVycyhub25OcGNQbGF5ZXJzKTtcbiAgY29uc3Qga2lsbHMgPSBwYXJzZUVsaW1pbmF0aW9ucyhnYW1lSUQpO1xuICBjb25zdCBzdGF0ID0gcGFyc2VTdGF0cyhub25OcGNQbGF5ZXJzLCBnYW1lSUQsIHJlcGxheU5hbWUsIG1vZGUpO1xuICBjb25zdCBnYW1lcnMgPSBwYXJzZUdhbWVycyhub25OcGNQbGF5ZXJzLCBwbGF5ZXJzLCBnYW1lSUQsIG1vZGUpO1xuICBhd2FpdCBkb3dubG9hZFNraW5zKHBsYXllcnMpO1xuICByZXR1cm4gYXdhaXQgZGIuYWRkUmVwbGF5KGdhbWVycywga2lsbHMsIHBsYXllcnMsIHN0YXQpO1xufVxuIiwiaW1wb3J0IHthcHAsIGlwY01haW4sIGRpYWxvZ30gZnJvbSAnZWxlY3Ryb24nO1xuaW1wb3J0ICcuL3NlY3VyaXR5LXJlc3RyaWN0aW9ucyc7XG5pbXBvcnQge3Jlc3RvcmVPckNyZWF0ZVdpbmRvd30gZnJvbSAnL0AvbWFpbldpbmRvdyc7XG5pbXBvcnQge3dhdGNofSBmcm9tICdjaG9raWRhcic7XG5pbXBvcnQge2FkZFJlcGxheX0gZnJvbSAnLi9yZXBsYXlQYXJzZXInO1xuXG5sZXQgd2luZG93OkVsZWN0cm9uLkJyb3dzZXJXaW5kb3c7XG5cbmNvbnN0IGlzU2luZ2xlSW5zdGFuY2UgPSBhcHAucmVxdWVzdFNpbmdsZUluc3RhbmNlTG9jaygpO1xuaWYgKCFpc1NpbmdsZUluc3RhbmNlKSB7XG4gIGFwcC5xdWl0KCk7XG4gIHByb2Nlc3MuZXhpdCgwKTtcbn1cbmFwcC5vbignc2Vjb25kLWluc3RhbmNlJywgcmVzdG9yZU9yQ3JlYXRlV2luZG93KTtcblxuLy9hcHAuZGlzYWJsZUhhcmR3YXJlQWNjZWxlcmF0aW9uKCk7XG5cbmFwcC5vbignd2luZG93LWFsbC1jbG9zZWQnLCAoKSA9PiB7XG4gIGlmIChwcm9jZXNzLnBsYXRmb3JtICE9PSAnZGFyd2luJykge1xuICAgIGFwcC5xdWl0KCk7XG4gIH1cbn0pO1xuXG5hcHAub24oJ2FjdGl2YXRlJywgcmVzdG9yZU9yQ3JlYXRlV2luZG93KTtcblxuYXBwXG4gIC53aGVuUmVhZHkoKVxuICAudGhlbihhc3luYyAoKSA9PiB7d2luZG93ID0gYXdhaXQgcmVzdG9yZU9yQ3JlYXRlV2luZG93KCk7fSlcbiAgLmNhdGNoKGUgPT4gY29uc29sZS5lcnJvcignRmFpbGVkIGNyZWF0ZSB3aW5kb3c6JywgZSkpO1xuXG5cbmZ1bmN0aW9uIHJlc29sdmVUb0Fic29sdXRlUGF0aChwYXRoKSB7XG4gIHJldHVybiBwYXRoLnJlcGxhY2UoLyUoW14lXSspJS9nLCBmdW5jdGlvbiAoXywga2V5KSB7XG4gICAgcmV0dXJuIHByb2Nlc3MuZW52W2tleV07XG4gIH0pO1xufVxuXG5jb25zdCByZXBsYXlGb2xkZXIgPSByZXNvbHZlVG9BYnNvbHV0ZVBhdGgoJyVMT0NBTEFQUERBVEElXFxcXEZvcnRuaXRlR2FtZVxcXFxTYXZlZFxcXFxEZW1vcycpO1xuXG53YXRjaChyZXBsYXlGb2xkZXIsIHtcbiAgYXdhaXRXcml0ZUZpbmlzaDoge1xuICAgIHN0YWJpbGl0eVRocmVzaG9sZDogMTAwMCxcbiAgfSxcbn0pLm9uKCdjaGFuZ2UnLCBhc3luYyAocGF0aCkgPT4ge1xuICBjb25zdCByZXN1bHQgPSBhd2FpdCBhZGRSZXBsYXkocGF0aCk7XG4gIGlmIChyZXN1bHQpIHtcbiAgICB3aW5kb3cucmVsb2FkKCk7XG4gIH1cbn0pO1xuXG5pcGNNYWluLmhhbmRsZSgnYWRkUmVwbGF5JywgYXN5bmMgKF8pID0+IHtcbiAgY29uc3QgcmVzID0gYXdhaXQgZGlhbG9nLnNob3dPcGVuRGlhbG9nKHtwcm9wZXJ0aWVzOiBbJ29wZW5GaWxlJywgJ211bHRpU2VsZWN0aW9ucyddLCBkZWZhdWx0UGF0aDogcmVwbGF5Rm9sZGVyfSk7XG4gIGlmICghcmVzLmNhbmNlbGVkICYmIHJlcy5maWxlUGF0aHMubGVuZ3RoID4gMCkge1xuICAgIGZvciAobGV0IHggPSAwOyB4IDwgcmVzLmZpbGVQYXRocy5sZW5ndGg7IHgrKykge1xuICAgICAgY29uc3QgcGF0aCA9IHJlcy5maWxlUGF0aHNbeF07XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBhZGRSZXBsYXkocGF0aCk7XG4gICAgICBpZiAocmVzLmZpbGVQYXRocy5sZW5ndGggPT0gMSAmJiByZXN1bHQpIHtcbiAgICAgICAgcmV0dXJuICdsYXN0JztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59KTtcblxuaXBjTWFpbi5vbignY2xvc2VQcm9ncmFtJywgKCkgPT4ge1xuXHRhcHAuZXhpdCgpO1xufSk7XG5cbmlwY01haW4ub24oJ21pbmltaXplUHJvZ3JhbScsICgpID0+IHtcbiAgd2luZG93Lm1pbmltaXplKCk7XG59KTtcbiJdLCJuYW1lcyI6WyJBTExPV0VEX09SSUdJTlNfQU5EX1BFUk1JU1NJT05TIiwiQUxMT1dFRF9FWFRFUk5BTF9PUklHSU5TIiwiYXBwIiwiXyIsImNvbnRlbnRzIiwiZXZlbnQiLCJ1cmwiLCJvcmlnaW4iLCJVUkwiLCJ3ZWJDb250ZW50cyIsInBlcm1pc3Npb24iLCJjYWxsYmFjayIsInBlcm1pc3Npb25HcmFudGVkIiwiX2EiLCJzaGVsbCIsIndlYlByZWZlcmVuY2VzIiwicGFyYW1zIiwiU3RvcmUiLCJzdG9yZSIsInNldHRpbmdzIiwiY3JlYXRlV2luZG93IiwiaXNJbkZyYW1lIiwic2NyZWVuIiwiZHAiLCJpbkZyYW1lIiwiYnJvd3NlcldpbmRvdyIsIkJyb3dzZXJXaW5kb3ciLCJqb2luIiwicGFnZVVybCIsInBvc2l0aW9uIiwic2l6ZSIsInJlc3RvcmVPckNyZWF0ZVdpbmRvdyIsIndpbmRvdyIsInciLCJHYW1lRWxpbWluYXRpb24iLCJkYXRhIiwiR2FtZVBsYXllciIsIkdhbWVTdGF0IiwiUGxheWVyIiwiaW5pdFN0YXRlbWVudHMiLCJnZXRBbGwiLCJzcWwiLCJyZXNvbHZlIiwicmVqZWN0IiwiZGIiLCJlcnIiLCJyb3dzIiwic2VyaWFsaXplIiwiZGJSdW4iLCJ4IiwiZXhlYyIsImdldFNpbmdsZSIsIndoZXJlSW5HZW5lcmF0b3IiLCJEYXRhYmFzZSIsInNxbGl0ZSIsImdhbWVycyIsImtpbGxzIiwicGxheWVycyIsInN0YXQiLCJlc2NhcGUiLCJsaW5lIiwiZyIsImsiLCJzZXJpYWxpemVxbCIsInBsYXllclNxbCIsInAiLCJleGlzdGluZ1BsYXllciIsInBsYXRmb3JtIiwic2tpbiIsInBhZ2UiLCJyZXN1bHQiLCJtYXRjaGVzIiwiZSIsInBsYXllcklEIiwiZ2FtZXJHYW1lcyIsImdhbWVJRCIsImVsaW1pbmF0aW9ucyIsImZpbHRlcmVkIiwic3RhdHMiLCJHdW5UeXBlIiwibm9kZUZldGNoIiwiY2xpZW50Iiwic2hhcnAiLCJjcnlwdG8iLCJyZXBsYXkiLCJyZXBsYXlJUEMiLCJwYXRoIiwicmVwbGF5TmFtZSIsIlBJUEVfTkFNRSIsImNwIiwic2VydmVyIiwibmV0Iiwic3RyZWFtIiwiY2h1bmsiLCJ2YWx1ZSIsImVycm9yIiwicGFyc2VQbGF5ZXJzIiwiZXhpc3RpbmdQbGF5ZXJzIiwiciIsInBsYXllcklkIiwicHJlRXhpc3RpbmciLCJlcCIsInBhcnNlRWxpbWluYXRpb25zIiwiZWxpbXMiLCJ0aW1lTSIsInRpbWVTIiwicGFyc2VTdGF0cyIsIm5vbk5wY1BsYXllcnMiLCJtb2RlIiwiaW5DcmVhdGl2ZSIsImJvdENvdW50IiwicGxheWVyQ291bnQiLCJvd25lclBsYXllciIsIm93bmVySUQiLCJnYW1lRHVyYXRpb24iLCJwYXJzZUdhbWVycyIsImRhdGFQbGF5ZXIiLCJfYiIsIl9jIiwidGVhbSIsInQiLCJ0ZWFtUGxhY2VtZW50IiwiZG93bmxvYWRTa2lucyIsImRvd25sb2FkSW1hZ2UiLCJmaWxlcGF0aCIsInJlcyIsImNyZWF0ZVdyaXRlU3RyZWFtIiwidW5saW5rIiwic2tpbnMiLCJza2luRm9sZGVyIiwiZXhpc3RzU3luYyIsIm1rZGlyU3luYyIsInNraW5QYXRoIiwiamJvZHkiLCJhZGRSZXBsYXkiLCJjcmVhdGVHYW1lU2Vzc2lvbklEIiwibGFzdEdhbWUiLCJTUExJVF9SRVBMQVlfVElNRSIsImdhbWVJZHgiLCJuZXh0SWR4IiwiaXNTaW5nbGVJbnN0YW5jZSIsInJlc29sdmVUb0Fic29sdXRlUGF0aCIsImtleSIsInJlcGxheUZvbGRlciIsIndhdGNoIiwiaXBjTWFpbiIsImRpYWxvZyJdLCJtYXBwaW5ncyI6IjhjQXNCTUEsRUFBa0MsSUFBSSxJQUd0QyxDQUFDLENBQ1AsRUFZTUMsRUFBMkIsSUFBSSxJQUF5QixDQUFDLG9CQUFvQixDQUFDLEVBRXBGQyxFQUFBLElBQUksR0FBRyx1QkFBd0IsQ0FBQ0MsRUFBR0MsSUFBYSxDQVM5Q0EsRUFBUyxHQUFHLGdCQUFpQixDQUFDQyxFQUFPQyxJQUFRLENBQzNDLEtBQU0sQ0FBQyxPQUFBQyxDQUFVLEVBQUEsSUFBSUMsTUFBSUYsQ0FBRyxFQUN4Qk4sRUFBZ0MsSUFBSU8sQ0FBTSxHQUs5Q0YsRUFBTSxlQUFlLENBSXJCLENBQ0QsRUFRREQsRUFBUyxRQUFRLDRCQUE0QixDQUFDSyxFQUFhQyxFQUFZQyxJQUFhLE9BQ2xGLEtBQU0sQ0FBQyxPQUFBSixDQUFNLEVBQUksSUFBSUMsRUFBSSxJQUFBQyxFQUFZLFFBQVEsRUFFdkNHLEVBQW9CLENBQUMsR0FBQ0MsRUFBQWIsRUFBZ0MsSUFBSU8sQ0FBTSxJQUExQyxNQUFBTSxFQUE2QyxJQUFJSCxJQUM3RUMsRUFBU0MsQ0FBaUIsQ0FJMUIsQ0FDRCxFQVlEUixFQUFTLHFCQUFxQixDQUFDLENBQUNFLElBQUFBLEtBQVMsQ0FDdkMsS0FBTSxDQUFDLE9BQUFDLENBQVUsRUFBQSxJQUFJQyxNQUFJRixDQUFHLEVBR3hCLE9BQUFMLEVBQXlCLElBQUlNLENBQU0sR0FFckNPLEVBQUEsTUFBTSxhQUFhUixDQUFHLEVBQUUsTUFBTSxRQUFRLEtBQUssRUFNdEMsQ0FBQyxPQUFRLE9BQU0sQ0FDdkIsRUFTREYsRUFBUyxHQUFHLHNCQUF1QixDQUFDQyxFQUFPVSxFQUFnQkMsSUFB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
