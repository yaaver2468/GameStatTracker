"use strict";
Object.defineProperties(exports, { __esModule: { value: true }, [Symbol.toStringTag]: { value: "Module" } });
const electron = require("electron");
const sqlite3 = require("sqlite3");
const versions = process.versions;
const nodeFetch = require("node-fetch");
function closeProgram() {
  electron.ipcRenderer.send("closeProgram");
}
function minimizeProgram() {
  electron.ipcRenderer.send("minimizeProgram");
}
function openUrl(url) {
  electron.shell.openExternal(url);
}
async function checkUpdate() {
  const updateURL = "https://raw.githubusercontent.com/GuardianSeeker/SniperHunter/master/version";
  const version = 3;
  const res = await nodeFetch(updateURL);
  const latestVersion = parseFloat(await res.text());
  return latestVersion > version;
}
async function addReplay() {
  const result = await electron.ipcRenderer.invoke("addReplay");
  return result;
}
class GameElimination {
  id;
  gameID;
  time;
  killerID;
  killedID;
  knocked;
  weapon;
  constructor(data = {
    id: 0,
    gameID: "",
    time: 0,
    killerID: "",
    killedID: "",
    knocked: false,
    weapon: ""
  }) {
    this.id = data.id;
    this.gameID = data.gameID;
    this.time = parseInt(data.time.toString());
    this.killerID = data.killerID;
    this.killedID = data.killedID;
    this.knocked = data.knocked;
    this.weapon = data.weapon;
  }
}
class GamePlayer {
  id;
  playerID;
  gameID;
  isBot;
  team;
  kills;
  placement;
  constructor(data = {
    id: 0,
    playerID: "",
    gameID: "",
    isBot: true,
    team: 0,
    kills: 0,
    placement: 999
  }) {
    this.id = data.id;
    this.playerID = data.playerID;
    this.gameID = data.gameID;
    this.isBot = data.isBot;
    this.team = data.team;
    this.kills = data.kills;
    this.placement = data.placement;
  }
}
class GameStat {
  gameID;
  owner;
  timestamp;
  replayName;
  mode;
  bots;
  players;
  duration;
  placement;
  kills;
  assists;
  accuracy;
  damageDealt;
  damageTaken;
  distanceTravelled;
  constructor(data = {
    gameID: "",
    owner: "",
    timestamp: new Date(),
    replayName: "",
    mode: "",
    bots: 0,
    players: 0,
    duration: 0,
    placement: 0,
    kills: 0,
    assists: 0,
    accuracy: 0,
    damageDealt: 0,
    damageTaken: 0,
    distanceTravelled: 0
  }) {
    this.gameID = data.gameID;
    this.owner = data.owner;
    this.timestamp = data.timestamp;
    this.replayName = data.replayName;
    this.mode = data.mode;
    this.bots = data.bots;
    this.players = data.players;
    this.duration = data.duration;
    this.placement = data.placement;
    this.kills = data.kills;
    this.assists = data.assists;
    this.accuracy = data.accuracy;
    this.damageDealt = data.damageDealt;
    this.damageTaken = data.damageTaken;
    this.distanceTravelled = data.distanceTravelled;
  }
}
class Player {
  playerID;
  username;
  isBot;
  platform;
  skin;
  snipes;
  constructor(data = {
    playerID: "",
    username: "AI",
    isBot: true,
    platform: "epic",
    skin: "epic",
    snipes: 0
  }) {
    this.playerID = data.playerID;
    this.username = data.username;
    this.isBot = data.isBot;
    this.platform = data.platform;
    this.skin = data.skin;
    this.snipes = data.snipes;
  }
}
const initStatements = [
  `CREATE TABLE IF NOT EXISTS 'GameEliminations' (
    'id' INTEGER PRIMARY KEY AUTOINCREMENT,
    'gameID' VARCHAR(255) NOT NULL,
    'time' INTEGER NOT NULL,
    'killerID' VARCHAR(255) NOT NULL,
    'killedID' VARCHAR(255) NOT NULL,
    'knocked' TINYINT(1) NOT NULL,
    'weapon' VARCHAR(255) NOT NULL
  )`,
  `CREATE TABLE IF NOT EXISTS 'GamePlayers' (
    'id' INTEGER PRIMARY KEY AUTOINCREMENT,
    'playerID' VARCHAR(255) NOT NULL,
    'gameID' VARCHAR(255) NOT NULL,
    'isBot' TINYINT(1) NOT NULL,
    'team' INTEGER NOT NULL,
    'kills' INTEGER NOT NULL DEFAULT 0,
    'placement' INTEGER NOT NULL
  )`,
  `CREATE TABLE IF NOT EXISTS 'GameStats' (
    'gameID' VARCHAR(255) NOT NULL UNIQUE PRIMARY KEY,
    'owner' VARCHAR(255) NOT NULL,
    'timestamp' DATETIME NOT NULL UNIQUE,
    'replayName' VARCHAR(255) NOT NULL,
    'mode' VARCHAR(255) NOT NULL,
    'bots' INTEGER NOT NULL,
    'players' INTEGER NOT NULL,
    'duration' INTEGER DEFAULT -1,
    'placement' INTEGER NOT NULL,
    'kills' INTEGER DEFAULT -1,
    'assists' INTEGER DEFAULT 0,
    'accuracy' DOUBLE PRECISION DEFAULT '-1',
    'damageDealt' INTEGER DEFAULT -1,
    'damageTaken' INTEGER DEFAULT -1,
    'distanceTravelled' DOUBLE PRECISION DEFAULT '-1'
  )`,
  `CREATE TABLE IF NOT EXISTS 'Players' (
    'playerID' VARCHAR(255) NOT NULL UNIQUE PRIMARY KEY,
    'username' VARCHAR(255) NOT NULL,
    'isBot' VARCHAR(255) NOT NULL,
    'platform' VARCHAR(255),
    'skin' VARCHAR(255),
    'snipes' INTEGER NOT NULL DEFAULT 1
  )`
];
async function getAll(sql) {
  return new Promise(function(resolve, reject) {
    db.database.all(sql, function(err, rows) {
      if (err) {
        console.log(err);
        return reject(err);
      }
      resolve(rows);
    });
  });
}
async function serialize(sql) {
  return new Promise((resolve, reject) => {
    db.database.serialize(() => {
      function dbRun(x) {
        if (x < sql.length) {
          db.database.run(sql[x], (err) => {
            if (err) {
              console.log(err);
              return reject(false);
            } else {
              dbRun(++x);
            }
          });
        }
        resolve(true);
      }
      dbRun(0);
    });
  });
}
async function exec(sql) {
  return new Promise(function(resolve, reject) {
    db.database.exec(sql, function(err) {
      if (err) {
        console.log(err);
        return reject(false);
      }
      resolve(true);
    });
  });
}
async function getSingle(sql) {
  return new Promise(function(resolve, reject) {
    db.database.get(sql, function(err, rows) {
      if (err) {
        console.log(err);
        return reject(err);
      }
      resolve(rows);
    });
  });
}
function whereInGenerator(data) {
  return `(${"'" + data.join("','") + "'"})`;
}
class Database {
  database;
  constructor() {
    this.database = new sqlite3.Database("database.db", (err) => {
      if (err)
        console.error("Database opening error: ", err);
    });
    initStatements.forEach((sql) => {
      this.database.run(sql);
    });
  }
  addReplay = async (gamers, kills, players, stat) => {
    function escape(line) {
      return line.replaceAll("'", "''");
    }
    let sql;
    sql = `INSERT INTO GameStats VALUES ('${stat.gameID}', '${stat.owner}', '${stat.timestamp.toISOString()}', '${escape(stat.replayName)}', '${stat.mode}', ${stat.bots}, ${stat.players}, ${stat.duration}, ${stat.placement}, ${stat.kills}, ${stat.assists}, ${stat.accuracy}, ${stat.damageDealt}, ${stat.damageTaken}, ${stat.distanceTravelled})`;
    if (!await exec(sql)) {
      return false;
    }
    sql = `INSERT INTO GamePlayers VALUES ${gamers.map((g) => `(NULL, '${g.playerID}', '${g.gameID}', ${g.isBot ? 1 : 0}, ${g.team}, ${g.kills}, ${g.placement})`).join(", ")}`;
    if (!await exec(sql)) {
      return false;
    }
    if (kills.length > 0) {
      sql = `INSERT INTO GameEliminations VALUES ${kills.map((k) => `(NULL, '${k.gameID}', ${k.time}, '${k.killerID}', '${k.killedID}', ${k.knocked}, '${k.weapon}')`).join(", ")}`;
      if (!await exec(sql)) {
        return false;
      }
    }
    const serializeql = [];
    const playerSql = [];
    for (let x = 0; x < players.length; x++) {
      const p = players[x];
      const existingPlayer = await this.getPlayer(p.playerID);
      const platform = p.platform == null ? "NULL" : `'${p.platform}'`;
      let skin = p.skin == null ? "NULL" : `'${p.skin}'`;
      if (existingPlayer.playerID.length > 0) {
        if (existingPlayer.skin != null && skin == "NULL") {
          skin = existingPlayer.skin;
        }
        serializeql.push(`UPDATE Players SET snipes = snipes + 1, platform = ${platform}, username = '${escape(p.username)}', skin = ${skin} WHERE playerID = '${p.playerID}'`);
      } else {
        playerSql.push(`('${p.playerID}', '${escape(p.username)}', ${p.isBot}, ${platform}, ${skin}, ${p.snipes})`);
      }
    }
    if (playerSql.length > 0) {
      sql = `INSERT INTO Players VALUES ${playerSql.join(", ")}`;
      if (!await exec(sql)) {
        return false;
      }
    }
    return await serialize(serializeql);
  };
  getMatchHistory = async (page = 1) => {
    const limit = 25;
    const result = await getAll(`SELECT * FROM GameStats ORDER BY timestamp DESC LIMIT ${limit} OFFSET ${limit * page - limit}`);
    const matches = [];
    result.forEach((e) => {
      matches.push(new GameStat(e));
    });
    return matches;
  };
  getGamerHistory = async (page = 1, playerID) => {
    const limit = 25;
    const matches = [];
    const gamerGames = await getAll(`SELECT gameID FROM GamePlayers WHERE playerID = '${playerID}'`);
    const result = await getAll(`SELECT * FROM GameStats WHERE gameID IN ${whereInGenerator(gamerGames.map((g) => g.gameID))} ORDER BY timestamp DESC LIMIT ${limit} OFFSET ${limit * page - limit}`);
    result.forEach((e) => {
      matches.push(new GameStat(e));
    });
    return matches;
  };
  getEliminations = async (gameID) => {
    const result = await getAll(`SELECT * FROM GameEliminations WHERE gameID='${gameID}' ORDER BY id`);
    const eliminations = [];
    result.forEach((e) => {
      eliminations.push(new GameElimination(e));
    });
    return eliminations;
  };
  getGamers = async (gameID) => {
    const result = await getAll(`SELECT * FROM GamePlayers WHERE gameID='${gameID}' ORDER BY team`);
    const gamers = [];
    result.forEach((e) => {
      gamers.push(new GamePlayer(e));
    });
    return gamers;
  };
  getGamerPlayers = async (gamers) => {
    const filtered = gamers.map((g) => `${g.playerID}`);
    const result = await getAll(`SELECT * FROM Players WHERE playerID IN ${whereInGenerator(filtered)}`);
    const players = [];
    result.forEach((e) => {
      players.push(new Player(e));
    });
    return players;
  };
  getGameStats = async (gameID) => {
    const result = await getSingle(`SELECT * FROM GameStats WHERE gameID='${gameID}'`);
    return new GameStat(result);
  };
  getPlayer = async (playerID) => {
    const result = await getSingle(`SELECT * FROM Players WHERE playerID='${playerID}'`);
    return new Player(result);
  };
  getPlayerGames = async (playerID) => {
    const result = await getAll(`SELECT * FROM GamePlayers WHERE playerID='${playerID}'`);
    const stats = [];
    result.forEach((e) => {
      stats.push(new GameStat(e));
    });
    return stats;
  };
  getLastGameID = async () => {
    const result = await getSingle("SELECT * FROM GameStats ORDER BY timestamp DESC LIMIT 1");
    return result != null ? result.gameID : null;
  };
  getSnipers = async () => {
    const result = await getAll("SELECT * FROM Players ORDER BY snipes DESC");
    const players = [];
    result.forEach((e) => {
      players.push(new Player(e));
    });
    return players;
  };
  deleteMatch = async (gameID) => {
    await exec(`DELETE FROM GameStats WHERE gameID='${gameID}'`);
    await exec(`UPDATE Players SET snipes = snipes - 1 WHERE playerID IN (SELECT playerID FROM GamePlayers WHERE gameID = '${gameID}')`);
    await exec(`DELETE FROM GamePlayers WHERE gameID='${gameID}'`);
    return await exec(`DELETE FROM GameEliminations WHERE gameID='${gameID}'`);
  };
}
const db = new Database();
exports.addReplay = addReplay;
exports.checkUpdate = checkUpdate;
exports.closeProgram = closeProgram;
exports.db = db;
exports.minimizeProgram = minimizeProgram;
exports.openUrl = openUrl;
exports.versions = versions;
const { contextBridge } = require("electron");
;
contextBridge.exposeInMainWorld("__electron_preload__addReplay", exports.addReplay);
;
contextBridge.exposeInMainWorld("__electron_preload__checkUpdate", exports.checkUpdate);
;
contextBridge.exposeInMainWorld("__electron_preload__closeProgram", exports.closeProgram);
;
contextBridge.exposeInMainWorld("__electron_preload__db", exports.db);
;
contextBridge.exposeInMainWorld("__electron_preload__minimizeProgram", exports.minimizeProgram);
;
contextBridge.exposeInMainWorld("__electron_preload__openUrl", exports.openUrl);
;
contextBridge.exposeInMainWorld("__electron_preload__versions", exports.versions);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
