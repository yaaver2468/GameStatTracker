"use strict";Object.defineProperties(exports,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}});const L=require("electron"),h=require("sqlite3"),O=process.versions,U=require("node-fetch");function A(){L.ipcRenderer.send("closeProgram")}function w(){L.ipcRenderer.send("minimizeProgram")}function S(n){L.shell.openExternal(n)}async function f(){const t=await U("https://raw.githubusercontent.com/GuardianSeeker/SniperHunter/master/version");return parseFloat(await t.text())>3.4}async function $(){return await L.ipcRenderer.invoke("addReplay")}class k{id;gameID;time;killerID;killedID;knocked;weapon;constructor(e={id:0,gameID:"",time:0,killerID:"",killedID:"",knocked:!1,weapon:""}){this.id=e.id,this.gameID=e.gameID.toLowerCase(),this.time=e.time,this.killerID=e.killerID.toLowerCase(),this.killedID=e.killedID.toLowerCase(),this.knocked=e.knocked,this.weapon=e.weapon}}class C{id;playerID;gameID;isBot;team;kills;placement;constructor(e={id:0,playerID:"",gameID:"",isBot:!0,team:0,kills:0,placement:999}){this.id=e.id,this.playerID=e.playerID,this.gameID=e.gameID,this.isBot=e.isBot,this.team=e.team,this.kills=e.kills,this.placement=e.placement}}class T{gameID;owner;timestamp;replayName;mode;bots;players;duration;placement;kills;assists;accuracy;damageDealt;damageTaken;distanceTravelled;constructor(e={gameID:"",owner:"",timestamp:new Date,replayName:"",mode:"",bots:0,players:0,duration:0,placement:0,kills:0,assists:0,accuracy:0,damageDealt:0,damageTaken:0,distanceTravelled:0}){this.gameID=e.gameID.toLowerCase(),this.owner=e.owner.toLowerCase(),this.timestamp=e.timestamp,this.replayName=e.replayName,this.mode=e.mode,this.bots=e.bots,this.players=e.players,this.duration=e.duration,this.placement=e.placement,this.kills=e.kills,this.assists=e.assists,this.accuracy=e.accuracy,this.damageDealt=e.damageDealt,this.damageTaken=e.damageTaken,this.distanceTravelled=e.distanceTravelled}}class d{playerID;username;isBot;platform;skin;snipes;constructor(e={playerID:"",username:"AI",isBot:!0,platform:"epic",skin:"epic",snipes:0}){this.playerID=e.playerID.toLowerCase(),this.username=e.username,this.isBot=e.isBot,this.platform=e.platform,this.skin=e.skin,this.snipes=e.snipes}}const G=[`CREATE TABLE IF NOT EXISTS 'GameEliminations' (
    'id' INTEGER PRIMARY KEY AUTOINCREMENT,
    'gameID' VARCHAR(255) NOT NULL,
    'time' INTEGER NOT NULL,
    'killerID' VARCHAR(255) NOT NULL,
    'killedID' VARCHAR(255) NOT NULL,
    'knocked' TINYINT(1) NOT NULL,
    'weapon' VARCHAR(255) NOT NULL
  )`,`CREATE TABLE IF NOT EXISTS 'GamePlayers' (
    'id' INTEGER PRIMARY KEY AUTOINCREMENT,
    'playerID' VARCHAR(255) NOT NULL,
    'gameID' VARCHAR(255) NOT NULL,
    'isBot' TINYINT(1) NOT NULL,
    'team' INTEGER NOT NULL,
    'kills' INTEGER NOT NULL DEFAULT 0,
    'placement' INTEGER NOT NULL
  )`,`CREATE TABLE IF NOT EXISTS 'GameStats' (
    'gameID' VARCHAR(255) NOT NULL UNIQUE PRIMARY KEY,
    'owner' VARCHAR(255) NOT NULL,
    'timestamp' DATETIME NOT NULL UNIQUE,
    'replayName' VARCHAR(255) NOT NULL,
    'mode' VARCHAR(255) NOT NULL,
    'bots' INTEGER NOT NULL,
    'players' INTEGER NOT NULL,
    'duration' INTEGER DEFAULT -1,
    'placement' INTEGER NOT NULL,
    'kills' INTEGER DEFAULT -1,
    'assists' INTEGER DEFAULT 0,
    'accuracy' DOUBLE PRECISION DEFAULT '-1',
    'damageDealt' INTEGER DEFAULT -1,
    'damageTaken' INTEGER DEFAULT -1,
    'distanceTravelled' DOUBLE PRECISION DEFAULT '-1'
  )`,`CREATE TABLE IF NOT EXISTS 'Players' (
    'playerID' VARCHAR(255) NOT NULL UNIQUE PRIMARY KEY,
    'username' VARCHAR(255) NOT NULL,
    'isBot' VARCHAR(255) NOT NULL,
    'platform' VARCHAR(255),
    'skin' VARCHAR(255),
    'snipes' INTEGER NOT NULL DEFAULT 1
  )`];async function m(n){return new Promise(function(e,t){I.database.all(n,function(s,a){if(s)return console.log(s),t(s);e(a)})})}async function P(n){return new Promise((e,t)=>{I.database.serialize(()=>{function s(a){a<n.length&&I.database.run(n[a],i=>{if(i)return console.log(i),t(!1);s(++a)}),e(!0)}s(0)})})}async function c(n){return new Promise(function(e,t){I.database.exec(n,function(s){if(s)return console.log(s),t(!1);e(!0)})})}async function R(n){return new Promise(function(e,t){I.database.get(n,function(s,a){if(s)return console.log(s),t(s);e(a)})})}function g(n){return`(${"'"+n.join("','")+"'"})`}class M{database;constructor(){this.database=new h.Database("database.db",e=>{e&&console.error("Database opening error: ",e)}),G.forEach(e=>{this.database.run(e)})}addReplay=async(e,t,s,a)=>{function i(r){return r.replaceAll("'","''")}let o;if(o=`INSERT INTO GameStats VALUES ('${a.gameID}', '${a.owner}', '${a.timestamp.toISOString()}', '${i(a.replayName)}', '${a.mode}', ${a.bots}, ${a.players}, ${a.duration}, ${a.placement}, ${a.kills}, ${a.assists}, ${a.accuracy}, ${a.damageDealt}, ${a.damageTaken}, ${a.distanceTravelled})`,!await c(o)||(o=`INSERT INTO GamePlayers VALUES ${e.map(r=>`(NULL, '${r.playerID}', '${r.gameID}', ${r.isBot?1:0}, ${r.team}, ${r.kills}, ${r.placement})`).join(", ")}`,!await c(o))||t.length>0&&(o=`INSERT INTO GameEliminations VALUES ${t.map(r=>`(NULL, '${r.gameID}', ${r.time}, '${r.killerID}', '${r.killedID}', ${r.knocked}, '${r.weapon}')`).join(", ")}`,!await c(o)))return!1;const p=[],N=[];for(let r=0;r<s.length;r++){const l=s[r],D=await this.getPlayer(l.playerID),y=l.platform==null?"NULL":`'${l.platform}'`;let u=l.skin==null?"NULL":`'${l.skin}'`;D!=null?(D.skin!=null&&u=="NULL"&&(u=D.skin),p.push(`UPDATE Players SET snipes = snipes + 1, platform = ${y}, username = '${i(l.username)}', skin = ${u} WHERE playerID = '${l.playerID}'`)):N.push(`('${l.playerID}', '${i(l.username)}', ${l.isBot}, ${y}, ${u}, ${l.snipes})`)}return N.length>0&&(o=`INSERT INTO Players VALUES ${N.join(", ")}`,!await c(o))?!1:await P(p)};getMatchHistory=async(e=1)=>{const s=await m(`SELECT * FROM GameStats ORDER BY timestamp DESC LIMIT ${25} OFFSET ${25*e-25}`),a=[];return s.forEach(i=>{a.push(new T(i))}),a};getGamerHistory=async(e=1,t)=>{const a=[],i=await m(`SELECT gameID FROM GamePlayers WHERE playerID = '${t}'`);return(await m(`SELECT * FROM GameStats WHERE gameID IN ${g(i.map(p=>p.gameID))} ORDER BY timestamp DESC LIMIT ${25} OFFSET ${25*e-25}`)).forEach(p=>{a.push(new T(p))}),a};getEliminations=async e=>{const t=await m(`SELECT * FROM GameEliminations WHERE gameID='${e}' ORDER BY id`),s=[];return t.forEach(a=>{s.push(new k(a))}),s};getGamers=async e=>{const t=await m(`SELECT * FROM GamePlayers WHERE gameID='${e}' ORDER BY team`),s=[];return t.forEach(a=>{s.push(new C(a))}),s};getGamerPlayers=async e=>{const t=e.map(i=>`${i.playerID}`),s=await m(`SELECT * FROM Players WHERE playerID IN ${g(t)}`),a=[];return s.forEach(i=>{a.push(new d(i))}),a};getGameStats=async e=>{const t=await R(`SELECT * FROM GameStats WHERE gameID='${e}'`);return new T(t)};getPlayer=async e=>await R(`SELECT * FROM Players WHERE playerID='${e}'`);getPlayers=async()=>await m("SELECT * FROM Players");getPlayerGames=async e=>{const t=await m(`SELECT * FROM GamePlayers WHERE playerID='${e}'`),s=[];return t.forEach(a=>{s.push(new T(a))}),s};getLastGameID=async()=>{const e=await R("SELECT * FROM GameStats ORDER BY timestamp DESC LIMIT 1");return e!=null?e.gameID:null};getSnipers=async()=>{const e=await m("SELECT * FROM Players ORDER BY snipes DESC"),t=[];return e.forEach(s=>{t.push(new d(s))}),t};getLastGame=async()=>await R("SELECT * FROM GameStats ORDER BY Timestamp DESC LIMIT 1");deleteMatch=async e=>(await c(`DELETE FROM GameStats WHERE gameID='${e}'`),await c(`UPDATE Players SET snipes = snipes - 1 WHERE playerID IN (SELECT playerID FROM GamePlayers WHERE gameID = '${e}')`),await c(`DELETE FROM GamePlayers WHERE gameID='${e}'`),await c(`DELETE FROM GameEliminations WHERE gameID='${e}'`))}const I=new M;exports.addReplay=$;exports.checkUpdate=f;exports.closeProgram=A;exports.db=I;exports.minimizeProgram=w;exports.openUrl=S;exports.versions=O;const{contextBridge:E}=require("electron");E.exposeInMainWorld("__electron_preload__addReplay",exports.addReplay);E.exposeInMainWorld("__electron_preload__checkUpdate",exports.checkUpdate);E.exposeInMainWorld("__electron_preload__closeProgram",exports.closeProgram);E.exposeInMainWorld("__electron_preload__db",exports.db);E.exposeInMainWorld("__electron_preload__minimizeProgram",exports.minimizeProgram);E.exposeInMainWorld("__electron_preload__openUrl",exports.openUrl);E.exposeInMainWorld("__electron_preload__versions",exports.versions);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
